/* @flow */

import { parseText } from 'compiler/parser/text-parser'
import { parseStyleText } from 'web/util/style'
// getAndRemoveAttr删除并返回attrsList上的属性
// getBindingAttr获取并解析v-bind属性
// baseWarn打印编译错误
import {
  getAndRemoveAttr,
  getBindingAttr,
  baseWarn
} from 'compiler/helpers'
// 此处的transformNode是用来解析动态跟静态的style的
function transformNode (el: ASTElement, options: CompilerOptions) {
  // 缓存警告函数
  const warn = options.warn || baseWarn
  // 从抽象节点el上的attrsList数组中删除并返回静态style属性
  const staticStyle = getAndRemoveAttr(el, 'style')
  // 非生产环境下会对静态style的值做进一步的判断
  if (staticStyle) {
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      // 借助调用parseText来判断，若有返回值，表示绑定了动态数据
      const res = parseText(staticStyle, options.delimiters)
      if (res) {
        // 静态属性内的插值会直接被JSON.stringify序列化，所以动态绑定不会有效果，
        // 需动态插值请使用动态语法
        warn(
          `style="${staticStyle}": ` +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.'
        )
      }
    }
    // 静态属性style若存在，为抽象节点设置静态类属性
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle))
  }
  // 获取动态属性style，getBindingAttr内部也会调用getAndRemoveAttr把处理过的属性从attrsList上删除
  const styleBinding = getBindingAttr(el, 'style', false /* getStatic */)
  // 如果存在动态属性style，为抽象节点设置动态style属性
  if (styleBinding) {
    el.styleBinding = styleBinding
  }
}
// 把处理过的抽象节点的静态style跟动态style拼接返回
function genData (el: ASTElement): string {
  let data = ''
  if (el.staticStyle) {
    data += `staticStyle:${el.staticStyle},`
  }
  if (el.styleBinding) {
    data += `style:(${el.styleBinding}),`
  }
  return data
}
// 暴露给外部
export default {
  staticKeys: ['staticStyle'],
  transformNode,
  genData
}

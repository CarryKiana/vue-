/* @flow */
/* 共享的工具方法 */
// 一个被冻结的空对象，此空对象不允许任何修改操作,原型亦不能
export const emptyObject = Object.freeze({})

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
// 判断是否是undefined或null
export function isUndef (v: any): boolean %checks {
  return v === undefined || v === null
}
// 判断是否不是undefined并且不是null
export function isDef (v: any): boolean %checks {
  return v !== undefined && v !== null
}
// 判断是否为真
export function isTrue (v: any): boolean %checks {
  return v === true
}
// 判断是否为假
export function isFalse (v: any): boolean %checks {
  return v === false
}

/**
 * Check if value is primitive
 */
// 判断是否是原始值
export function isPrimitive (value: any): boolean %checks {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
// 判断是否是对象(typeof null 为 object)
export function isObject (obj: mixed): boolean %checks {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value e.g. [object Object]
 */
// 缓存对象原型上的toString方法
const _toString = Object.prototype.toString
// 获取所传入值的类型（如传入字符串则放回String）
export function toRawType (value: any): string {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
// 判断是否是纯javascript对象
export function isPlainObject (obj: any): boolean {
  return _toString.call(obj) === '[object Object]'
}
// 判断是否是正则表达式
export function isRegExp (v: any): boolean {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
// 判断是否是有效的数组下标（大于0的有限整数）
export function isValidArrayIndex (val: any): boolean {
  const n = parseFloat(String(val))
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
// 将值转换成实际呈现的字符串
export function toString (val: any): string {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
// 将值转换成数字，失败的话原值返回
export function toNumber (val: string): number | string {
  const n = parseFloat(val)
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
// 生成用于判断传入的字符串是否在映射表中的判断函数（映射表生成器）
export function makeMap (
  str: string,
  expectsLowerCase?: boolean
): (key: string) => true | void {
  const map = Object.create(null)
  const list: Array<string> = str.split(',')
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true
  }
  return expectsLowerCase
    ? val => map[val.toLowerCase()]
    : val => map[val]
}

/**
 * Check if a tag is a built-in tag.
 */
// 用于判断key值是否在slot，component的表中(小写)
export const isBuiltInTag = makeMap('slot,component', true)

/**
 * Check if a attribute is a reserved attribute.
 */
// 用于判断key值是否在key,ref,slot,slot-scope,is的表中(不区分大小写)
export const isReservedAttribute = makeMap('key,ref,slot,slot-scope,is')

/**
 * Remove an item from an array
 */
// 从数组中移除元素
export function remove (arr: Array<any>, item: any): Array<any> | void {
  if (arr.length) {
    const index = arr.indexOf(item)
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
// 缓存对象原型上的判断属性方法
const hasOwnProperty = Object.prototype.hasOwnProperty
// 判断某对象上是否存在某属性
export function hasOwn (obj: Object | Array<*>, key: string): boolean {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
// 返回一个可以缓存执行过的结果的函数，就是说，我调用这个cached函数，入参为A函数，返回结果为B函数,那么每次调用B函数，传入一个字符串（key值），如果这个key对应的值已存在，返回这个值，如果不存在，执行A（key）再把结果缓存并返回
export function cached<F: Function> (fn: F): F {
  const cache = Object.create(null)
  return (function cachedFn (str: string) {
    const hit = cache[str]
    return hit || (cache[str] = fn(str))
  }: any)
}

/**
 * Camelize a hyphen-delimited string.
 */
// 全局匹配连字符，并把匹配到的分组
const camelizeRE = /-(\w)/g
// 把连字符风格的字符串转换成驼峰式风格的字符串(分组里只包含一个字符，故转换成大写的只有这个字符),若之前已有缓存，直接返回缓存的值
export const camelize = cached((str: string): string => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')
})

/**
 * Capitalize a string.
 */
// 把字符串第一个字符转换为大写，若之前已有缓存，直接返回缓存的值
export const capitalize = cached((str: string): string => {
  return str.charAt(0).toUpperCase() + str.slice(1)
})

/**
 * Hyphenate a camelCase string.
 */
// 全局匹配非单词边界的A-Z字符串（如'AzzzBzzzCzz'将匹配到'B'跟'C'）
const hyphenateRE = /\B([A-Z])/g
// 把驼峰式风格的字符串转换成连字符的字符串,若之前已有缓存，直接返回缓存的值
export const hyphenate = cached((str: string): string => {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
})

/**
 * Simple bind polyfill for environments that do not support it... e.g.
 * PhantomJS 1.x. Technically we don't need this anymore since native bind is
 * now more performant in most browsers, but removing it would be breaking for
 * code that was able to run in PhantomJS 1.x, so this must be kept for
 * backwards compatibility.
 */
// 增加bind函数的浏览器垫片，具体原因看上方英文,作用其实就是利用apply或call来改变执行的上下文环境，模拟Function.prototype.bind
/* istanbul ignore next */
function polyfillBind (fn: Function, ctx: Object): Function {
  function boundFn (a) {
    const l = arguments.length
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length
  return boundFn
}
// 为Function.prototype.bind做下包装
function nativeBind (fn: Function, ctx: Object): Function {
  return fn.bind(ctx)
}
// 垫片适配,即要改变执行环境直接把要执行的函数跟上下文传入bind即可，不用考虑平台对Function.prototype.bind的支持
export const bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind

/**
 * Convert an Array-like object to a real Array.
 */
// 把类数组对象转换成真实的数组对象
export function toArray (list: any, start?: number): Array<any> {
  start = start || 0
  let i = list.length - start
  const ret: Array<any> = new Array(i)
  while (i--) {
    ret[i] = list[i + start]
  }
  return ret
}

/**
 * Mix properties into target object.
 */
// 把源对象上的属性拷贝到目标对象上，这里是浅拷贝
export function extend (to: Object, _from: ?Object): Object {
  for (const key in _from) {
    to[key] = _from[key]
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
// 利用上面定义的extend方法，把一组对象上的属性复制到一个对象上
export function toObject (arr: Array<any>): Object {
  const res = {}
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i])
    }
  }
  return res
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
// 一个空函数,不做任何操作
export function noop (a?: any, b?: any, c?: any) {}

/**
 * Always return false.
 */
// 一个始终返回false的函数
export const no = (a?: any, b?: any, c?: any) => false

/**
 * Return same value
 */
// 一个始终返回参数本身的函数
export const identity = (_: any) => _

/**
 * Generate a static keys string from compiler modules.
 */
// 为传入的数组对象生成一个静态的字符串标志，具体的讲就是迭代数组中的每个对象，把每个对象里的staticKeys属性用','分隔组成字符串并返回
export function genStaticKeys (modules: Array<ModuleOptions>): string {
  return modules.reduce((keys, m) => {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
// 判断两个对象a跟b是否松散相等
// 情况1： 若严格相等（全等）,那么肯定松散相等，返回true
// 若不全等,判断a跟b是否是对象 
// a跟b都是对象，try语句判断a跟b是否是数组，
// 情况2： a跟b都是数组，比较a跟b的长度，遍历比较a跟b的每个元素是否松散相等，根据结果返回
// 情况3： a跟b都不是数组（即是键值对结构），比较a跟b的属性个数，遍历比较a跟b的每个属性是否松散相等，根据结果返回
// 情况4： a跟b一是数组一是对象，结构不同，直接返回false
// 情况5： catch捕获try语句中的错误，直接返回false（这个貌似是表示无能为力，比较不了）
// 情况6： a跟b都不是对象，转换成字符串后比较值，值全等则返回true，否则返回false
// 情况7： a跟b中一个是对象，一个不是对象，类型不同，直接返回false
export function looseEqual (a: any, b: any): boolean {
  if (a === b) return true
  const isObjectA = isObject(a)
  const isObjectB = isObject(b)
  if (isObjectA && isObjectB) {
    try {
      const isArrayA = Array.isArray(a)
      const isArrayB = Array.isArray(b)
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every((e, i) => {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        const keysA = Object.keys(a)
        const keysB = Object.keys(b)
        return keysA.length === keysB.length && keysA.every(key => {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}
// 比较某对象，看其是否跟数组中的某个元素松散相等，若是的话，返回对应的数组下标，否则返回-1
export function looseIndexOf (arr: Array<mixed>, val: mixed): number {
  for (let i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) return i
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
// 对函数进行包装，确保函数只执行一次,即调用once函数，传入函数A，返回函数B，那么在运行函数B的时候，如果标志called为false，则执行A函数，同时把called改为true，下次执行B的时候就不会再执行A
export function once (fn: Function): Function {
  let called = false
  return function () {
    if (!called) {
      called = true
      fn.apply(this, arguments)
    }
  }
}

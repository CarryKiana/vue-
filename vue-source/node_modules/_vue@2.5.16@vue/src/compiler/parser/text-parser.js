/* @flow */
// 执行某个函数并缓存结果
import { cached } from 'shared/util'
// 分析表达式跟过滤器
import { parseFilters } from './filter-parser'
// 默认标签表达式，全局非贪婪匹配双花括号{{}}
const defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g
// 全局匹配在匹配规则之外的字符
const regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g
// 根据自定义的分隔符生成正则表达式
const buildRegex = cached(delimiters => {
  // $& 表示的是regexp的子串，所以根据传入的自定义分隔符，在regexEscapeRE中查找
  // 找到后用'\\$&'替换（字符串跟正则使用同一套转换规则，因此需要\\，第一个\对第二个\转义，传入正则就是\$&,第二个\对$转义）
  const open = delimiters[0].replace(regexEscapeRE, '\\$&')
  const close = delimiters[1].replace(regexEscapeRE, '\\$&')
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
})
// 定义文本解析结果的结构
type TextParseResult = {
  expression: string,
  tokens: Array<string | { '@binding': string }>
}
// 解析文本,其实就是寻找文本中插入的分隔符（默认的为{{}}），把分隔符中变量的替换为真正的数据
export function parseText (
  text: string,
  delimiters?: [string, string]
): TextParseResult | void {
  // 默认的分隔符可以被配置覆盖，所以这里判断一下是否有传入的自定义分隔符，
  // 有的话就根据传入的分隔符生成分隔符正则表达式，没有的话就使用默认的
  const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE
  // 如果没有匹配到分隔符，那么直接返回，表示不用对文本做数据替换处理
  if (!tagRE.test(text)) {
    return
  }
  // 匹配到分隔符时，则继续处理
  const tokens = []
  const rawTokens = []
  // tagRE是全局匹配，每次执行匹配前先重置lastIndex
  let lastIndex = tagRE.lastIndex = 0
  let match, index, tokenValue
  // 全局的正则表达式会更改lastIndex，以便下次继续匹配
  while ((match = tagRE.exec(text))) {
    // index属性指定匹配的文本的第一个位置
    index = match.index
    // push text token
    // 把文本标记进栈
    // index是匹配到文本的第一个位置，而tagRE.lastIndex是下次匹配时的起始位置
    // 那么什么情况下index会大于lastIndex？
    // 只要匹配到，index始终会大于lastIndex,lastIndex非tagRE.lastIndex
    // 故lastIndex是上一次匹配到的下一次匹配开始位置
    if (index > lastIndex) {
      // 匹配到的原始字符串进栈保存，为何不直接用match[0]？
      rawTokens.push(tokenValue = text.slice(lastIndex, index))
      // 匹配到的原始字符串序列化后进栈保存
      tokens.push(JSON.stringify(tokenValue))
    }
    // tag token
    // match[1]是匹配到的分隔符中的内容
    // 如果存在过滤器，exp是包装后的表达式，否则是原封不动的返回值
    const exp = parseFilters(match[1].trim())
    // 解析后的表达式进栈(为何同一次循环中要进栈两次？一次匹配到的文本，一次处理后的文本？)
    tokens.push(`_s(${exp})`)
    rawTokens.push({ '@binding': exp })
    // 更改lastIndex以便下次循环
    lastIndex = index + match[0].length
    // 进入下一轮循环
  }
  // 匹配不到时tagRE.lastIndex会自动重置为0，故存一份lastIndex是有必要的
  // 如果lastIndex < text.length，即循环完后还剩下一部分不匹配的，把这剩下的部分也进栈
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex))
    tokens.push(JSON.stringify(tokenValue))
  }
  // 返回结果
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

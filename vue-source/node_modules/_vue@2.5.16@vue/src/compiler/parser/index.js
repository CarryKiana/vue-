/* @flow */

import he from 'he'
import { parseHTML } from './html-parser'
import { parseText } from './text-parser'
// parseFilters用于解析表达式，分析并装换其中的过滤器
import { parseFilters } from './filter-parser'
import { genAssignmentCode } from '../directives/model'
import { extend, cached, no, camelize } from 'shared/util'
import { isIE, isEdge, isServerRendering } from 'core/util/env'
// 处理抽象语法树的辅助函数
import {
  addProp,
  addAttr,
  baseWarn,
  addHandler,
  addDirective,
  getBindingAttr,
  getAndRemoveAttr,
  pluckModuleFunction
} from '../helpers'
// 匹配v-on指令
export const onRE = /^@|^v-on:/
// 匹配指令
export const dirRE = /^v-|^@|^:/
// 匹配v-for指令的表达式，\s表示任意unicode空白符，[^]应该是要排除空字符串，但是加上*好像就不明其意了，这里目的是为了捕获表达式中in/of前后的别名
export const forAliasRE = /([^]*?)\s+(?:in|of)\s+([^]*)/
// 匹配以逗号开头，后面跟除,}]外的任意字符，这里应该是用来匹配v-for的多钟写法:
// <div v-for="(item, index) in items"></div>
// <div v-for="(val, key) in object"></div>
// <div v-for="(val, name, index) in object"></div>
export const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/
// 匹配 ( 或 )
const stripParensRE = /^\(|\)$/g
// 匹配绑定的属性形式，如 :key
const argRE = /:(.*)$/
// 匹配v-bind:
export const bindRE = /^:|^v-bind:/
// 匹配修饰符，如： .native
const modifierRE = /\.[^.]+/g
// 具有缓存功能的html解码器
const decodeHTMLCached = cached(he.decode)

// configurable state
// 定义了一系列可配置的状态，emmm...根据名字猜咯
export let warn: any
let delimiters
let transforms
let preTransforms
let postTransforms
let platformIsPreTag
let platformMustUseProp
let platformGetTagNamespace
// 定义属性的类型结构
type Attr = { name: string; value: string };
// 创建抽象语法树的元素节点
export function createASTElement (
  tag: string,
  attrs: Array<Attr>,
  parent: ASTElement | void
): ASTElement {
  return {
    // 节点类型，1表示元素
    type: 1,
    // 节点标签
    tag,
    // 节点原始属性
    attrsList: attrs,
    // 节点属性的映射表形式
    attrsMap: makeAttrsMap(attrs),
    // 节点的父节点
    parent,
    // 节点的子节点数组
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
// 把HTML字符串模板转换为AST抽象语法树
// 参数template就是挂载时传入的this.$options.template
// 参数options是compileToFunctions传入的那个对象跟baseOption的混合
export function parse (
  template: string,
  options: CompilerOptions
): ASTElement | void {
  // 缓存警告函数
  warn = options.warn || baseWarn
  
  // 判断是否是pre这个标签
  platformIsPreTag = options.isPreTag || no
  // 判断是否该使用prop
  platformMustUseProp = options.mustUseProp || no
  // 获取标签所属命名空间
  platformGetTagNamespace = options.getTagNamespace || no
  // 取出options.modules数组对象上的每个transformNode函数，整合成一个数组，以下同理,亦即klass(class),style,model属性的转换前，转换中，转换后的处理函数数组
  // klass中包含staticKeys: ['staticClass']、transformNode、genData三个
  // style中包含staticKeys: ['staticStyle']、transformNode、genData三个
  // model中只包含preTransformNode一个
  // 因此若文件没有在其他地方混合其他方法，transforms只包含klass、style的处理，preTransforms只包含model的处理,postTransforms就只是个空数组
  // options.modules继承自baseOption，包含klass、style、model三个属性,这里就是取出这三者上面的transformNode，整成数组待用
  transforms = pluckModuleFunction(options.modules, 'transformNode')
  // options.modules继承自baseOption，包含klass、style、model三个属性,这里就是取出这三者上面的preTransformNode，整成数组待用
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode')
  // options.modules继承自baseOption，包含klass、style、model三个属性,这里就是取出这三者上面的postTransformNode，整成数组待用
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode')
  // 缓存分隔符
  delimiters = options.delimiters

  const stack = []
  const preserveWhitespace = options.preserveWhitespace !== false
  let root
  let currentParent
  // 表示是否含有v-pre属性，或者是含有v-pre属性的子节点
  let inVPre = false
  // 表示是否是pre标签，或者是位于pre标签内
  let inPre = false
  let warned = false

  function warnOnce (msg) {
    if (!warned) {
      warned = true
      warn(msg)
    }
  }

  function closeElement (element) {
    // check pre state
    if (element.pre) {
      inVPre = false
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false
    }
    // apply post-transforms
    for (let i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options)
    }
  }
  // 解析template转换为抽象语法树,第二个参数是一个对象，准备了许多解析辅助函数
  parseHTML(template, {
    warn,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    start (tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      // 检查标签所属命名空间。如果父节点有命名空间，那么继承父节点的命名空间，若没有，根据标签判断生成,svg所属的命名空间为svg。math标签命名空间为math，其余均为undefined
      const ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag)

      // handle IE svg bug
      // 如果是svg所属标签，需要对其做ie下的兼容
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs)
      }
      // 为标签创建抽象节点
      let element: ASTElement = createASTElement(tag, attrs, currentParent)
      // 若存在命名空间，为节点添加命名空间属性
      if (ns) {
        element.ns = ns
      }
      // 在非服务端渲染的情况下，如果是被禁止的元素，非生产环境下会提示警告
      if (isForbiddenTag(element) && !isServerRendering()) {
        // 为元素打上禁止标记
        element.forbidden = true
        // 意思就是说，模板的功能只是负责将状态映射到UI视图的，像style、text/javascript类型的script应当避免在模板中放置
        // 他们带有副作用而不会被解析。
        process.env.NODE_ENV !== 'production' && warn(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          `<${tag}>` + ', as they will not be parsed.'
        )
      }

      // apply pre-transforms
      // 为节点属性做转换前的处理，循环每一个处理函数（数组里面只有处理解析v-model的,只对input标签上的动态type做处理）
      for (let i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element
      }
      // inVPre用来表示抽象节点是否需要编译,不需要编译的可能是含有v-pre的节点，也可能是含有v-pre节点的子元素
      // 初始化的时候inVPre为false，因此会先判断一下当前抽象节点上是否含有v-pre属性,(之后inVPre若改为true的话，因为inVPre是
      // 内部状态变量，在解析当前节点的子元素时应该会保存为true这个状态)
      if (!inVPre) {
        // 判断抽象节点上是否存在v-pre指令，若存在时，element.pre为true
        processPre(element)
        // 若是抽象节点上含有v-pre指令，inVPre改为true，表示当前节点跟其子节点都不需要编译
        if (element.pre) {
          inVPre = true
        }
      }
      // 判断是否是pre标签，html的<pre>标签可预定义格式化的文本，被包围在pre元素中的文本通常会保留空格和换行符，
      // pre标签的一个常见应用就是用来表示计算机的源代码
      if (platformIsPreTag(element.tag)) {
        inPre = true
      }
      // 如果是含有v-pre属性，或者是包含于含有v-pre属性的节点内,对属性处理时直接序列化属性值，不做转换处理
      if (inVPre) {
        processRawAttrs(element)
      // 否则的话若节点没有被处理过，依次处理转换其上的各个属性
      } else if (!element.processed) {
        // structural directives
        // 结构指令
        // 处理v-for
        processFor(element)
        // 处理v-if
        processIf(element)
        processOnce(element)
        // element-scope stuff
        processElement(element, options)
      }

      function checkRootConstraints (el) {
        if (process.env.NODE_ENV !== 'production') {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce(
              `Cannot use <${el.tag}> as component root element because it may ` +
              'contain multiple nodes.'
            )
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce(
              'Cannot use v-for on stateful component root element because ' +
              'it renders multiple elements.'
            )
          }
        }
      }

      // tree management
      if (!root) {
        root = element
        checkRootConstraints(root)
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element)
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          })
        } else if (process.env.NODE_ENV !== 'production') {
          warnOnce(
            `Component template should contain exactly one root element. ` +
            `If you are using v-if on multiple elements, ` +
            `use v-else-if to chain them instead.`
          )
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent)
        } else if (element.slotScope) { // scoped slot
          currentParent.plain = false
          const name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element
        } else {
          currentParent.children.push(element)
          element.parent = currentParent
        }
      }
      if (!unary) {
        currentParent = element
        stack.push(element)
      } else {
        closeElement(element)
      }
    },

    end () {
      // remove trailing whitespace
      // 移除尾随的空格
      const element = stack[stack.length - 1]
      const lastNode = element.children[element.children.length - 1]
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop()
      }
      // pop stack
      stack.length -= 1
      currentParent = stack[stack.length - 1]
      closeElement(element)
    },

    chars (text: string) {
      if (!currentParent) {
        if (process.env.NODE_ENV !== 'production') {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.'
            )
          } else if ((text = text.trim())) {
            warnOnce(
              `text "${text}" outside root element will be ignored.`
            )
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      const children = currentParent.children
      text = inPre || text.trim()
        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : ''
      if (text) {
        let res
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text
          })
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text
          })
        }
      }
    },
    // 把注释内容转换为注释对象，以子节点的形式放入当前节点
    comment (text: string) {
      currentParent.children.push({
        type: 3,
        text,
        isComment: true
      })
    }
  })
  return root
}
// v-pre不需要表达式，用于跳过当前元素跟子元素的编译过程，跳过大量没有指令的节点会加快编译
function processPre (el) {
  // 判断抽象节点上是否有v-pre属性，若有的话，给抽象节点打上pre标志
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true
  }
}
// 把属性当作原始的来处理（即不做绑定属性替换工作）,含有v-pre属性或者位于含有v-pre属性的节点中时会呗调用
function processRawAttrs (el) {
  const l = el.attrsList.length
  // 如果存在属性，遍历每个节点属性，因为是含有v-pre属性或者位于含有v-pre属性的标签内，不会进行编译转换，
  // 故只是单纯的对每个属性的值做序列化处理
  if (l) {
    const attrs = el.attrs = new Array(l)
    for (let i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      }
    }
  // 如果不存在属性，同时节点的pre标志位false（表示节点自身没有v-pre属性，而是位于含有v-pre属性的节点内）,
  // 设置 节点的plain属性为true（plain用来标记位于pre标签中且不含任何属性？）
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    // 位于pre标签块中
    el.plain = true
  }
}
// 处理抽象节点element上attrsList中的属性，不同的属性处理的方式不同
export function processElement (element: ASTElement, options: CompilerOptions) {
  // 处理抽象节点element上attrsList中的key属性，将之转移到element上
  processKey(element)

  // determine whether this is a plain element after
  // removing structural attributes
  // 在删除结构属性后确定这是否是普通元素(即没有key属性，并且attrsList长度为空)
  element.plain = !element.key && !element.attrsList.length
  // 处理抽象节点element上attrsList中的ref属性
  processRef(element)
  // 处理抽象节点element上attrsList中的slot
  processSlot(element)
  // 处理抽象节点element，确认element是动态组件或是内置模板组件
  processComponent(element)
  // 遍历处理抽象节点element上的class跟style属性
  // transforms里包含了解析合并静态跟动态的class和style属性,按照顺序，应该是class先被处理
  for (let i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element
  }
  // 处理除了key、ref、slot、compoonent、class、style之外的属性
  processAttrs(element)
}
// key的作用： 1、虚拟dom算法中比较跟辨识新老vnode；2、更新时强制替换标签而不是复用
// 将el上attrsList中的key属性转为抽象节点el的属性
function processKey (el) {
  // 返回el属性attrsList中的key属性
  const exp = getBindingAttr(el, 'key')
  // 如果存在key属性值，将之赋到el上
  if (exp) {
    // template最终不会被渲染，故key不能挂载在template标签上
    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {
      warn(`<template> cannot be keyed. Place the key on real elements instead.`)
    }
    el.key = exp
  }
}
// 处理抽象节点上attrsList中的ref属性
// ref 被用来给元素或子组件注册引用信息,引用信息将会注册在父组件的$refs对象上
// 如果是在普通的DOM元素上使用，引用指向的就是DOM元素，如果用在子组件上，引用
// 就指向组件实例，当v-for用于元素或组件的时候，引用信息讲师包含DOM节点或组件实例的数组
function processRef (el) {
  // 获取el上attrsList中的ref属性
  const ref = getBindingAttr(el, 'ref')
  // 如果存在这个ref属性,将它转到抽象节点el上
  // 同时判断当前抽象节点el是否位于v-for循环中
  if (ref) {
    el.ref = ref
    el.refInFor = checkInFor(el)
  }
}
// 加工v-for，即对抽象节点上的的v-for属性做转换处理
export function processFor (el: ASTElement) {
  let exp
  // 删除并返回抽象节点attrsList上的v-for属性(要处理的就从attrsList上删除，避免重复处理)
  // 如果找到v-for属性，对v-for做加工处理
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    // 解析获取到的v-for属性值,得到res = { alias: 'itemindexkey', iterator1: 'index', iterator2: 'key' }
    const res = parseFor(exp)
    // 解析到循环体跟别名后，混合到抽象节点上（v-for表示对当前的标签进行重复,故在当前标签转换成的抽象节点上加入重复标记）
    if (res) {
      extend(el, res)
    // 若解析出错，非生产环境下提示警告
    } else if (process.env.NODE_ENV !== 'production') {
      warn(
        `Invalid v-for expression: ${exp}`
      )
    }
  }
}
// 定义v-for解析结果的属性结构
type ForParseResult = {
  for: string;
  alias: string;
  iterator1?: string;
  iterator2?: string;
};
// 解析匹配到的v-for属性值
export function parseFor (exp: string): ?ForParseResult {
  // 正则表达式匹配v-for中的关键字，捕获循环体跟每一次循环的对象的别名
  const inMatch = exp.match(forAliasRE)
  // 捕获不到，直接返回
  if (!inMatch) return

  const res = {}
  // 保存循环体
  res.for = inMatch[2].trim()
  // 处理捕获到的别名,去掉左右圆括号，即像(item, index)这样的变成item, index
  const alias = inMatch[1].trim().replace(stripParensRE, '')
  // 再把item, index, key这样的以, 分开来
  const iteratorMatch = alias.match(forIteratorRE)
  // 确认alias中存在 ','，
  if (iteratorMatch) {
    // 处理后的别名为 itemindexkey
    res.alias = alias.replace(forIteratorRE, '')
    // iteratorMatch[1]是第一个逗号后面的迭代标记，即是index
    res.iterator1 = iteratorMatch[1].trim()
    // 若存在第二个逗号,也保存下来iteratorMatch[2]是第二个逗号后面的迭代标记，即是key
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim()
    }
  // 如果alias不存在 ',' 那么整个当作处理后的别名
  } else {
    res.alias = alias
  }
  // 处理完后返回处理结果，res = { alias: 'itemindexkey', iterator1: 'index', iterator2: 'key' }
  return res
}
// 处理转换v-if属性
function processIf (el) {
  // 取出v-if属性
  const exp = getAndRemoveAttr(el, 'v-if')
  if (exp) {
    el.if = exp
    addIfCondition(el, {
      exp: exp,
      block: el
    })
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true
    }
    const elseif = getAndRemoveAttr(el, 'v-else-if')
    if (elseif) {
      el.elseif = elseif
    }
  }
}

function processIfConditions (el, parent) {
  const prev = findPrevElement(parent.children)
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    })
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      `v-${el.elseif ? ('else-if="' + el.elseif + '"') : 'else'} ` +
      `used on element <${el.tag}> without corresponding v-if.`
    )
  }
}

function findPrevElement (children: Array<any>): ASTElement | void {
  let i = children.length
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {
        warn(
          `text "${children[i].text.trim()}" between v-if and v-else(-if) ` +
          `will be ignored.`
        )
      }
      children.pop()
    }
  }
}
// 把if条件添加进节点的条件数组里(if条件用来判断节点是否渲染)
export function addIfCondition (el: ASTElement, condition: ASTIfCondition) {
  if (!el.ifConditions) {
    el.ifConditions = []
  }
  el.ifConditions.push(condition)
}

function processOnce (el) {
  const once = getAndRemoveAttr(el, 'v-once')
  if (once != null) {
    el.once = true
  }
}
// 处理slot
// slot作为插槽，用来作为承载分发内容的出口
function processSlot (el) {
  // 如果是slot插槽标签，获取插槽名称name
  if (el.tag === 'slot') {
    // 记录插槽名（组件调用时会把插槽内容根据插槽名称分发）
    el.slotName = getBindingAttr(el, 'name')
    if (process.env.NODE_ENV !== 'production' && el.key) {
      // 插槽slot是抽象的出口，可以被拓展为多个元素，如果需要使用key的话，应该加到
      // 包裹它的元素上面
      warn(
        `\`key\` does not work on <slot> because slots are abstract outlets ` +
        `and can possibly expand into multiple elements. ` +
        `Use the key on a wrapping element instead.`
      )
    }
  // 非slot插槽标签的话，判断是否是分发插槽的内容
  } else {
    let slotScope
    // 规则就是以template标签作为载体，scope、slot、slot-scope、v-slot等做为分发标志
    // 但scope、slot-scope已被废弃，vue3.0开始将不再支持
    if (el.tag === 'template') {
      slotScope = getAndRemoveAttr(el, 'scope')
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && slotScope) {
        // scope虽然能用但其实已被废弃,这里因为是2.5版本，所以提倡使用slot-scope标签，
        // 而在2.6版本时slot-scpoe也被废弃，转为使用v-slot
        warn(
          `the "scope" attribute for scoped slots have been deprecated and ` +
          `replaced by "slot-scope" since 2.5. The new "slot-scope" attribute ` +
          `can also be used on plain elements in addition to <template> to ` +
          `denote scoped slots.`,
          true
        )
      }
      // 设置抽象节点的slotScope属性，slotScope要么来自scope要么来自slot-scope
      // 来自slot-scope就不会提示警告
      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope')
    // 一下分支处理在非template的标签上使用了slot-scope属性的情况
    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
      // slot-scope跟v-for在标签上组合使用不明确，v-for的优先级更高,
      // 请使用template来包裹，让它变得清晰
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && el.attrsMap['v-for']) {
        warn(
          `Ambiguous combined usage of slot-scope and v-for on <${el.tag}> ` +
          `(v-for takes higher priority). Use a wrapper <template> for the ` +
          `scoped slot to make it clearer.`,
          true
        )
      }
      // 同样非template标签也会设置抽象节点的slotScope属性
      el.slotScope = slotScope
    }
    // 除了template，除了slot-scope之外，还有这样的一种情况（非判断分支，因为默认没有slot的会被当做default，也已被废弃）
    // <base-layout>
    // <h1 slot="header">Here might be a page title</h1>
    // </base-layout>
    // 它会在渲染的时候把<h1>Here might be a page title</h1>插入组件内, 
    // 替换相应具名插槽<slot name="header"></slot>的位置
    const slotTarget = getBindingAttr(el, 'slot')
    // 在解析字符串模板属性值时做了处理，属性值value要么是解析出来的值，没值时会默认取''
    // 那么可能解析出来的会是'""'这样的一个值
    if (slotTarget) {
      // 插槽没有的情况下设置为默认的插槽default
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget
      // preserve slot as an attribute for native shadow DOM compat
      // only for non-scoped slots.
      // 仅将slot作为没有域的本地的阴影dom节点的属性保留？？？？？？？
      // 若标签不是template，并且不存在slot等类似的属性，会把这个以{name: 'slot', value: slotTarget}
      // 的形式加入el的attrs数组中
      // 
      if (el.tag !== 'template' && !el.slotScope) {
        addAttr(el, 'slot', slotTarget)
      }
    }
  }
}
// 处理component
// v-bind:is, is 用于动态组件且基于DOM内模板的限制来工作
// 等于说是将当前的标签替换为is绑定的标签
function processComponent (el) {
  let binding
  // 如果抽象节点存在is属性，把is属性的内存存放到el.component
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding
  }
  // 如果抽象节点存在inline-template属性，为抽象节点el打上内置模板标志
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true
  }
}
// 处理除了key、ref、slot、compoonent、class、style之外的属性（可能是用户自定义的，也可能是标签特有的）
function processAttrs (el) {
  const list = el.attrsList
  let i, l, name, rawName, value, modifiers, isProp
  // 遍历每个属性，区分处理静态属性跟动态属性
  for (i = 0, l = list.length; i < l; i++) {
    // 缓存属性的名称跟值
    name = rawName = list[i].name
    value = list[i].value
    // 如果是动态属性(v-)，用处理动态属性的方式处理
    if (dirRE.test(name)) {
      // mark element as dynamic
      // 做下标记，表明el节点含有动态绑定的属性
      el.hasBindings = true
      // modifiers
      // 从属性名中解析出可能含有的修饰符
      modifiers = parseModifiers(name)
      // 如果含有修饰符，解析出修饰符后只保留属性名
      if (modifiers) {
        name = name.replace(modifierRE, '')
      }
      // 如果是v-bind指令,
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '')
        value = parseFilters(value)
        isProp = false
        // v-bind指令有三个修饰符，
        // .prop 被用于绑定DOM属性(property)（参考DOM节点属性property跟attribute的区别，.prop修饰符的用途：1、通过自定义属性存储变量，避免暴露数据；2、防止污染HTML结构）
        // .camel 将kebab-case特性名转换为camelCase,
        // .sync 扩展成一个更新父组件绑定值的v-on侦听器
        if (modifiers) {
          // 未加.prop时，v-bind默认绑定到DOM节点上的attribute，使用.prop修饰符后，会绑定到property
          // 有prop属性时，标志位isProp改为true，规范化属性名
          if (modifiers.prop) {
            isProp = true
            name = camelize(name)
            if (name === 'innerHtml') name = 'innerHTML'
          }
          // .camel 修饰符允许在使用DOM模板时将v-bind属性名称驼峰化
          // 如果有camel属性，把属性名称转化为驼峰式命名
          if (modifiers.camel) {
            name = camelize(name)
          }
          // .sync 用于实现子组件更新父组件，其实是v-on、$emit组合的简写
          // 如果有.sync属性，为节点添加对应的处理方法
          if (modifiers.sync) {
            addHandler(
              el,
              `update:${camelize(name)}`,
              genAssignmentCode(value, `$event`)
            )
          }
        }
        // 根据标志位调用不同的属性添加方法把处理后的属性添加进抽象节点
        if (isProp || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value)
        } else {
          addAttr(el, name, value)
        }
      // 如果是v-on指令,
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '')
        addHandler(el, name, value, modifiers, false, warn)
      } else { // normal directives
        name = name.replace(dirRE, '')
        // parse arg
        const argMatch = name.match(argRE)
        const arg = argMatch && argMatch[1]
        if (arg) {
          name = name.slice(0, -(arg.length + 1))
        }
        addDirective(el, name, rawName, value, arg, modifiers)
        if (process.env.NODE_ENV !== 'production' && name === 'model') {
          checkForAliasModel(el, value)
        }
      }
    // 如果是静态属性，用处理静态属性的方式处理
    } else {
      // literal attribute
      if (process.env.NODE_ENV !== 'production') {
        // parseText用于解析动态语法，判断是否在静态属性中使用了动态语法
        const res = parseText(value, delimiters)
        if (res) {
          warn(
            `${name}="${value}": ` +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.'
          )
        }
      }
      // 为抽象节点添加属性（序列化后的静态属性）
      addAttr(el, name, JSON.stringify(value))
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      // 即使在创建元素后立即通过属性设置，火狐也不会更新静音状态
      // 这里想强调的是对于某些属性，不带属性值才是规范的写法（存在这个属性为true，不存在即为false）
      // 而在火狐下，规范了写法后还存在一个问题，火狐不会对已经创建后再更改muted属性的video元素做出响应
      // 这里是规范muted的写法
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true')
      }
    }
  }
}
// v-for会被处理为el上的for属性，故这里往上遍历查找节点的for属性
// 若存在，即是处于v-for循环中，若直到循环结束都没有找到，则不处于循环中
function checkInFor (el: ASTElement): boolean {
  let parent = el
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent
  }
  return false
}
// 解析属性名称中的修饰符,如果解析到了，返回修饰符的解析对象
function parseModifiers (name: string): Object | void {
  const match = name.match(modifierRE)
  if (match) {
    const ret = {}
    match.forEach(m => { ret[m.slice(1)] = true })
    return ret
  }
}
// 把属性由数组对象的形式以键值对的方式整合进一个对象，形成映射表
function makeAttrsMap (attrs: Array<Object>): Object {
  const map = {}
  for (let i = 0, l = attrs.length; i < l; i++) {
    if (
      process.env.NODE_ENV !== 'production' &&
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      // 重复属性警告
      warn('duplicate attribute: ' + attrs[i].name)
    }
    map[attrs[i].name] = attrs[i].value
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el): boolean {
  return el.tag === 'script' || el.tag === 'style'
}
// 判断是否是被禁止的标签
// 基于模板的处理规则，像style和类型为text/javascript的标签是不会被处理的
function isForbiddenTag (el): boolean {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

const ieNSBug = /^xmlns:NS\d+/
const ieNSPrefix = /^NS\d+:/
// 处理ie下svg所属标签的bug，应该是在ie下，除了命名空间标识，其余的svg属性带有NS前缀的都会有问题，故如果是ie的话，去除这些属性前缀
/* istanbul ignore next */
function guardIESVGBug (attrs) {
  const res = []
  for (let i = 0; i < attrs.length; i++) {
    const attr = attrs[i]
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '')
      res.push(attr)
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  let _el = el
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn(
        `<${el.tag} v-model="${value}">: ` +
        `You are binding v-model directly to a v-for iteration alias. ` +
        `This will not be able to modify the v-for source array because ` +
        `writing to the alias is like modifying a function local variable. ` +
        `Consider using an array of objects and use v-model on an object property instead.`
      )
    }
    _el = _el.parent
  }
}

/* @flow */

import { noop, extend } from 'shared/util'
import { warn as baseWarn, tip } from 'core/util/debug'
// 定义模板编译转换后的结果类型，即模板经过编译后，应该生成一个动态渲染函数跟若干静态渲染函数
type CompiledFunctionResult = {
  render: Function;
  staticRenderFns: Array<Function>;
};
// 把代码字符串转换为执行语句
function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err, code })
    return noop
  }
}
// 用于生成把模板转换成渲染函数的函数(模板转换渲染函数构造器)
export function createCompileToFunctionFn (compile: Function): Function {
  // 缓存模板编译成渲染函数的编译结果，即缓存那个渲染函数
  const cache = Object.create(null)

  return function compileToFunctions (
    template: string,
    options?: CompilerOptions,
    vm?: Component
  ): CompiledFunctionResult {
    options = extend({}, options)
    const warn = options.warn || baseWarn
    delete options.warn

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      // detect possible CSP restriction
      // 监测可能的CSP限制
      try {
        new Function('return 1')
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          // 您似乎正在禁止使用unsafe-eval的内容安全策略环境中使用vue的独立版本，
          // 模板编译器无法在此环境中工作。
          // 考虑放宽策略以允许不安全的eval或者预编译你的模板，转成渲染函数
          warn(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          )
        }
      }
    }

    // check cache
    // 检查是否又缓存过该渲染函数，若有，返回该渲染函数
    // 咋看之下直接使用模板template来做key值感觉有点丧，但若不用template，没有什么可以确定渲染函数是否缓存过的
    const key = options.delimiters
      ? String(options.delimiters) + template
      : template
    if (cache[key]) {
      return cache[key]
    }

    // compile
    // 编译模板
    const compiled = compile(template, options)

    // check compilation errors/tips
    // 非生产环境下若编译出错，不仅会警告，同时会将编译过程中产生的错误与提示抛出
    if (process.env.NODE_ENV !== 'production') {
      if (compiled.errors && compiled.errors.length) {
        warn(
          `Error compiling template:\n\n${template}\n\n` +
          compiled.errors.map(e => `- ${e}`).join('\n') + '\n',
          vm
        )
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(msg => tip(msg, vm))
      }
    }

    // turn code into functions
    // 经过模板编译后，产生的只是渲染函数的执行代码字符串,
    // 以代码字符串为函数体创建渲染函数
    const res = {}
    const fnGenErrors = []
    res.render = createFunction(compiled.render, fnGenErrors)
    res.staticRenderFns = compiled.staticRenderFns.map(code => {
      return createFunction(code, fnGenErrors)
    })

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    // 检查函数生成过程中的错误
    // 这个应该只会在编译器本身存在错误时才会发生这种情况，主要用于代码开发（流弊啊，那么自信，这里的代码开发指vue的源码开发）
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production') {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn(
          `Failed to generate render function:\n\n` +
          fnGenErrors.map(({ err, code }) => `${err.toString()} in\n\n${code}\n`).join('\n'),
          vm
        )
      }
    }
    // 把结果缓存并返回
    return (cache[key] = res)
  }
}

/* @flow */

import {
  warn,
  nextTick,
  emptyObject,
  handleError,
  defineReactive
} from '../util/index'

import { createElement } from '../vdom/create-element'
import { installRenderHelpers } from './render-helpers/index'
import { resolveSlots } from './render-helpers/resolve-slots'
import VNode, { createEmptyVNode } from '../vdom/vnode'

import { isUpdatingChildComponent } from './lifecycle'
// 为实例初始化渲染属性
export function initRender (vm: Component) {
  vm._vnode = null // the root of the child tree
  vm._staticTrees = null // v-once cached trees
  const options = vm.$options
  // 保存抽象父节点的引用
  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree
  const renderContext = parentVnode && parentVnode.context
  // 处理组件slot，解析为slot插槽对象
  // vm.$slots用来访问被插槽分发的内容，在使用渲染函数书写组件时，访问vm.$slots最有帮助
  vm.$slots = resolveSlots(options._renderChildren, renderContext)
  // vm.$scopedSlots用来访问作用域插槽，包括默认的slot，包含与每一个插槽相对应的函数（用来生成VNode）
  vm.$scopedSlots = emptyObject
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  // 为实例绑定创建（抽象）节点方法，以便在调用此方法时能获取到正确的上下文
  // vm._c是在内部使用的版本，用于从模板编译为渲染函数
  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)
  // normalization is always applied for the public version, used in
  // user-written render functions.
  // vm.$createElement是公共版本，用于处理用户编写的渲染函数（option里的render配置）
  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  // vm.$attr跟vm.$listeners是暴露给高级组件的，他们需要转换为响应式以便使用它们的高级组件是时时更新的
  // vm.$attr包含了父作用域中不作为prop被识别（且获取）的特性绑定（class跟style除外）,创建高级组件时有用，详见官方文档
  // vm.$listeners包含了父作用域中的（不含.native修饰器的）v-on事件监听器,创建高级组件时有用，详见官方文档
  const parentData = parentVnode && parentVnode.data

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, () => {
      !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm)
    }, true)
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, () => {
      !isUpdatingChildComponent && warn(`$listeners is readonly.`, vm)
    }, true)
  } else {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true)
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true)
  }
}
// 混入渲染，其实就是在Vue的原型上定义一系列的用于解析模板，生成抽象节点的方法
export function renderMixin (Vue: Class<Component>) {
  // install runtime convenience helpers
  // 在vue的原型上挂上一系列的方法方便运行时调用
  installRenderHelpers(Vue.prototype)
  // $nextTick内部调用的是nextTick函数，把fn插入事件循环
  Vue.prototype.$nextTick = function (fn: Function) {
    return nextTick(fn, this)
  }
  // 于实例挂载、视图更新时调用，返回解析后的抽象节点
  Vue.prototype._render = function (): VNode {
    const vm: Component = this
    // render 或是新建实例时所传，或是经过解析模板后编译生成
    const { render, _parentVnode } = vm.$options

    // reset _rendered flag on slots for duplicate slot check
    // 在slots属性中为每一个slot重置渲染标志,用于做重复性检查
    if (process.env.NODE_ENV !== 'production') {
      for (const key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false
      }
    }
    // 有抽象父节点时，存储父节点的插槽数据用于之后渲染
    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    // 设置（保存）抽象父节点,这样做允许渲染函数可以访问占位符(插槽)节点上的数据
    // 这样做感觉减少调用层级，方便调用
    vm.$vnode = _parentVnode
    // render self
    let vnode
    // 调用render方法渲染生成抽象节点
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement)
    } catch (e) {
      handleError(e, vm, `render`)
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
          } catch (e) {
            handleError(e, vm, `renderError`)
            vnode = vm._vnode
          }
        } else {
          vnode = vm._vnode
        }
      } else {
        vnode = vm._vnode
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        )
      }
      vnode = createEmptyVNode()
    }
    // set parent
    vnode.parent = _parentVnode
    // 返回生成的抽象节点
    return vnode
  }
}

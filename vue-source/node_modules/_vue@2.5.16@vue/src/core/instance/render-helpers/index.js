/* @flow */

import { toNumber, toString, looseEqual, looseIndexOf } from 'shared/util'
import { createTextVNode, createEmptyVNode } from 'core/vdom/vnode'
import { renderList } from './render-list'
import { renderSlot } from './render-slot'
import { resolveFilter } from './resolve-filter'
import { checkKeyCodes } from './check-keycodes'
import { bindObjectProps } from './bind-object-props'
import { renderStatic, markOnce } from './render-static'
import { bindObjectListeners } from './bind-object-listeners'
import { resolveScopedSlots } from './resolve-slots'
// 设置渲染辅助函数
export function installRenderHelpers (target: any) {
  // Vue.prototype._o： 处理v-once，标记静态树
  target._o = markOnce
  // Vue.prototype._n：转成数字
  target._n = toNumber
  // Vue.prototype._s：转成字符串
  target._s = toString
  // Vue.prototype._l：渲染列表，用于处理v-for指令
  target._l = renderList
  // Vue.prototype._t: 渲染插槽，用于处理<slot>标签
  target._t = renderSlot
  // Vue.prototype._q：比较两个对象是否松散相等
  target._q = looseEqual
  // Vue.prototype._i：返回对象在数组中松散相等的下标
  target._i = looseIndexOf
  // Vue.prototype._m：渲染静态树
  target._m = renderStatic
  // Vue.prototype._f：解析filters属性
  target._f = resolveFilter
  // Vue.prototype._k：检查自定义键位
  target._k = checkKeyCodes
  // Vue.prototype._b：绑定数据到抽象节点
  target._b = bindObjectProps
  // Vue.prototype._v：创建抽象文本节点
  target._v = createTextVNode
  // Vue.prototype._e：创建抽象空节点
  target._e = createEmptyVNode
  // Vue.prototype._u：解析scopedSlots,转成键值对的形式
  target._u = resolveScopedSlots
  // Vue.protptype._g：把v-on绑定的事件合并到抽象节点的数据上
  target._g = bindObjectListeners
}

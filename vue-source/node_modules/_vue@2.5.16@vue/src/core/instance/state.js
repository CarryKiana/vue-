/* @flow */
// 配置对象
import config from '../config'
// 用于双向绑定、依赖收集的观察者对象
import Watcher from '../observer/watcher'
// 管理观察者对象的容器
import Dep, { pushTarget, popTarget } from '../observer/dep'
// boolean值，暂不知道用在哪，根据名字猜一下：是否是更新中的子组件
import { isUpdatingChildComponent } from './lifecycle'
// 双向绑定相关函数
import {
  set,
  del,
  observe,
  defineReactive,
  toggleObserving
} from '../observer/index'
// 辅助工具函数
import {
  warn,
  bind,
  noop,
  hasOwn,
  hyphenate,
  isReserved,
  handleError,
  nativeWatch,
  validateProp,
  isPlainObject,
  isServerRendering,
  isReservedAttribute
} from '../util/index'
// 共享属性的定义：可枚举、可配置、get、set都为空
const sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
}
// 代理props数据
// 在Vue.extend中调用代码为：
// const props = Comp.options.props
//   for (const key in props) {
//     proxy(Comp.prototype, `_props`, key)
//   }
// 也就是说访问Comp.prototype[key]实际上返回的是Comp.prototype._props.key
// 设置Comp.prototype[key]的值实际上是对Comp.prototype._props.key进行设置
// 但是_props这个是在哪里生成的？是在新建实例数据观测的时候产生（initProps），故而不用担心_props不存在
export function proxy (target: Object, sourceKey: string, key: string) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  }
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}
// 初始化观测数据,即根据解析出来的配置里的各个属性，调用相应的初始化方法
export function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  // 从这里可以看出实例属性的初始化顺序
  // 存在props，初始化props
  if (opts.props) initProps(vm, opts.props)
  // 存在methods，初始化methods
  if (opts.methods) initMethods(vm, opts.methods)
  // 存在data，初始化data
  if (opts.data) {
    initData(vm)
  // 不存在data时，初始化个默认值
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  // 存在computed，初始化computed
  if (opts.computed) initComputed(vm, opts.computed)
  // 存在watch，并且不是原生的({}).watch，初始化watch
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}
// 初始化props
function initProps (vm: Component, propsOptions: Object) {
  // propsData是创建实例时模拟父组件传递的props数据，主要作用是方便测试
  const propsData = vm.$options.propsData || {}
  // 初始化内部的_props
  const props = vm._props = {}
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  // 缓存prop的键，这样将来prop发生改变需要更新的时候可以在数组里查找，而不用去枚举迭代动态对象
  const keys = vm.$options._propKeys = []
  const isRoot = !vm.$parent
  // root instance props should be converted
  // 转换根实例的props
  // prop用于接收父组件的数据，根实例是没有父组件的，它是不需要被观测被收集依赖的，所以这里先把观测开关关闭
  if (!isRoot) {
    toggleObserving(false)
  }
  // 遍历propsOptions，即vm.$options.props，将其转换成访问器属性
  for (const key in propsOptions) {
    // 缓存每个prop的键
    keys.push(key)
    // 获取prop的有效值
    const value = validateProp(key, propsOptions, propsData, vm)
    // 之后把prop转成访问器属性
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      const hyphenatedKey = hyphenate(key)
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          `"${hyphenatedKey}" is a reserved attribute and cannot be used as component prop.`,
          vm
        )
      }
      defineReactive(props, key, value, () => {
        if (vm.$parent && !isUpdatingChildComponent) {
          // 避免对prop赋值的警告
          warn(
            `Avoid mutating a prop directly since the value will be ` +
            `overwritten whenever the parent component re-renders. ` +
            `Instead, use a data or computed property based on the prop's ` +
            `value. Prop being mutated: "${key}"`,
            vm
          )
        }
      })
    } else {
      defineReactive(props, key, value)
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    // 在Vue.extend()期间，静态的props已经被代理到组件原型上了，这里代理的是实例化时定义的props
    // key不在vm实例上时，为key做代理,这样访问vm.key实际上取的是vm._props[key]的值
    if (!(key in vm)) {
      proxy(vm, `_props`, key)
    }
  }
  // 处理完prop，复原观测开关
  toggleObserving(true)
}
// 初始化data
function initData (vm: Component) {
  // vm.$options.data是经过mergeOption处理过的，是配置对象data中函数的返回值
  let data = vm.$options.data
  // 即data还是函数时，再执行一下获取真正的data
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {}
  // 如果data不是对象,只能警告，提示配置对象中的data对应的那个函数需要返回一个对象
  if (!isPlainObject(data)) {
    data = {}
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    )
  }
  // proxy data on instance
  // 在实例上代理data数据
  // 遍历data上的每个属性，为每个属性挂代理，即访问vm[key]会去调取vm._data[key]的值
  const keys = Object.keys(data)
  const props = vm.$options.props
  const methods = vm.$options.methods
  let i = keys.length
  while (i--) {
    const key = keys[i]
    // 避免属性重复覆盖会警告
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          `Method "${key}" has already been defined as a data property.`,
          vm
        )
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        `The data property "${key}" is already declared as a prop. ` +
        `Use prop default value instead.`,
        vm
      )
    } else if (!isReserved(key)) {
      proxy(vm, `_data`, key)
    }
  }
  // observe data
  // observe中有以下代码
  // if (asRootData && ob) {
  //   ob.vmCount++
  // }
  // 用于观测对象所关联到的根组件计数
  observe(data, true /* asRootData */)
}
// 获取真正的data
export function getData (data: Function, vm: Component): any {
  // #7573 disable dep collection when invoking data getters
  // 禁用数据依赖收集
  pushTarget()
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, `data()`)
    return {}
  } finally {
    popTarget()
  }
}

const computedWatcherOptions = { lazy: true }
// 初始化计算属性computed
function initComputed (vm: Component, computed: Object) {
  // $flow-disable-line
  const watchers = vm._computedWatchers = Object.create(null)
  // computed properties are just getters during SSR
  // 在服务器渲染期间计算属性就被访问(仅仅只是访问)
  const isSSR = isServerRendering()

  for (const key in computed) {
    const userDef = computed[key]
    const getter = typeof userDef === 'function' ? userDef : userDef.get
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        `Getter is missing for computed property "${key}".`,
        vm
      )
    }
    // 为什么服务端渲染就不给创建内部观察者？
    // 服务端渲染的在created之前都是在服务端处理的，还没有输出到客户端（如浏览器）挂载渲染
    // 那么这个时候即便创建了内部观察者（服务端），输出到客户端后它也不会发挥作用
    if (!isSSR) {
      // create internal watcher for the computed property.
      // 为计算属性创建内部的观察程序(内部观察者)
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      )
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    // 组件定义的计算属性已经在原型上定义，这里定义的是实例化的计算属性
    // 即一些拓展的如Vue.extend的计算属性会挂到原型，由实例通过原型链继承
    // 这里只对实例的计算属性转换成访问器属性
    if (!(key in vm)) {
      defineComputed(vm, key, userDef)
    } else if (process.env.NODE_ENV !== 'production') {
      // 重复性检查，好像计算属性可以跟method重名耶,emmm...
      // method处理完后会直接挂在vm上，也就是说，如果computed跟method重名时，很明显是有问题的
      // 尝试了下，会在渲染时报错，一个报defineComputed里的 'was assigned to but it has no setter',说明还是被defineComputed了
      // 一个报'TypeError: xxx is not a function',这个是当作函数调用时被捕获，
      // 所以要么defineComputed在其他某个地方又被调用了，要么key in vm 为false,但是重名的话，key in vm应该会是true
      if (key in vm.$data) {
        warn(`The computed property "${key}" is already defined in data.`, vm)
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(`The computed property "${key}" is already defined as a prop.`, vm)
      }
    }
  }
}
// 定义计算属性
// 在Vue.extend中调用代码为：
// const computed = Comp.options.computed
// for (const key in computed) {
//   defineComputed(Comp.prototype, key, computed[key])
// }
export function defineComputed (
  target: any,
  key: string,
  userDef: Object | Function
) {
  // isServerRendering()判断是否是服务端渲染，返回Boolean值
  // 即不是服务端渲染时需要缓存，是服务端渲染时不需要缓存，emmm...为什么？
  // 都服务端渲染了，在服务端缓存，客户端读得到吗？
  const shouldCache = !isServerRendering()
  // 定义computed的时候传值可以是Function | { get: Function, set: Function } }，故此会做一下判断
  // 没有缓存时，每次获取值都是重新执行函数去计算结果
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : userDef
    sharedPropertyDefinition.set = noop
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        `Computed property "${key}" was assigned to but it has no setter.`,
        this
      )
    }
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}
// 创建计算属性的getter方法
// 非服务端渲染时，计算属性初始化会为每一个计算属性创建一个内置的观察者watcher，
// 这些内置watcher会被放入实例vm的_watchers数组中，之后因为是computedWatcherOptions = { lazy: true }
// 也即watcher.dirty为true，故初始化时并不会计算结果，只会等到属性被读取，才会调用计算结果
function createComputedGetter (key) {
  return function computedGetter () {
    const watcher = this._computedWatchers && this._computedWatchers[key]
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate()
      }
      if (Dep.target) {
        watcher.depend()
      }
      return watcher.value
    }
  }
}
// 初始化methods方法
function initMethods (vm: Component, methods: Object) {
  const props = vm.$options.props
  // 遍历methods里的每一个方法，把每一个方法都当成vm实例的属性挂载上去
  for (const key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      // 函数为null时警告
      if (methods[key] == null) {
        warn(
          `Method "${key}" has an undefined value in the component definition. ` +
          `Did you reference the function correctly?`,
          vm
        )
      }
      // 函数与prop同名时警告,prop优先级更高，因为prop是从父组件传过来的，必定先一步存在
      if (props && hasOwn(props, key)) {
        warn(
          `Method "${key}" has already been defined as a prop.`,
          vm
        )
      }
      // 以 _ 或 $ 开头并且已经在实例vm上存在了，说明是vue的内部保留属性，警告
      if ((key in vm) && isReserved(key)) {
        warn(
          `Method "${key}" conflicts with an existing Vue instance method. ` +
          `Avoid defining component methods that start with _ or $.`
        )
      }
    }
    // 这里做了错误处理（null），改变了函数的执行上下文（bind）
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm)
  }
}
// { [key: string]: string | Function | Object | Array }
function initWatch (vm: Component, watch: Object) {
  // 遍历watch，为每一个属性创建观察对象，用以监听数据变化
  for (const key in watch) {
    const handler = watch[key]
    // 允许传入数组，故如果监听处理函数是数组时，为监听的属性的每一个监听处理函数创建观察者对象
    if (Array.isArray(handler)) {
      for (let i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i])
      }
    // 不是数组，直接创建观察者对象
    } else {
      createWatcher(vm, key, handler)
    }
  }
}
// 为watch中的属性创建观察者，绑定处理函数
function createWatcher (
  vm: Component,
  expOrFn: string | Function,
  handler: any,
  options?: Object
) {
  // watch的值可以是个对象，形如：{ handler: function () {}, immediate: true, deep: true }
  // 故如果是对象时，处理函数是对象中的handler属性,其余属性会被当作是配置
  // immediate: true 将立即以表达式的当前值触发回调;deep: true会监听对象内部值的变化
  if (isPlainObject(handler)) {
    options = handler
    handler = handler.handler
  }
  // watch的值可以是个字符串，这个时候处理函数是vm实例上对应的方法
  if (typeof handler === 'string') {
    handler = vm[handler]
  }
  // 分析完毕后为watch属性调用继承来的$watch方法创建观察者对象
  return vm.$watch(expOrFn, handler, options)
}
// 定义实例属性跟实例方法
export function stateMixin (Vue: Class<Component>) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  // 用$data、$props代理_data跟_props
  const dataDef = {}
  dataDef.get = function () { return this._data }
  const propsDef = {}
  propsDef.get = function () { return this._props }
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData: Object) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      )
    }
    propsDef.set = function () {
      warn(`$props is readonly.`, this)
    }
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef)
  Object.defineProperty(Vue.prototype, '$props', propsDef)
  // 向响应式对象中添加一个属性，并确保新属性同样是响应式的，全局Vue.set别名
  Vue.prototype.$set = set
  // 删除目标对象的属性，目标对象是响应式的时，会触发更新视图,全局Vue.delete别名
  Vue.prototype.$delete = del
  // 观察Vue实例变化的一个表达式或计算属性函数expOrFn
  // expOrFn就是被观察的watch属性key，它值的改变将引起cb函数被调用
  // 就是用来观察某些值的变动异步做些处理，属性配置watch内部处理时会调用此方法
  Vue.prototype.$watch = function (
    expOrFn: string | Function,
    cb: any,
    options?: Object
  ): Function {
    const vm: Component = this
    // 如果cb是一个对象，解析cb再创建观察者（不走下面了直接返回，因为解析完后又重新调了一遍$watch）
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    // options类似 { immediate: true, deep: true }或undefined
    options = options || {}
    // options.user当作标志传入watcher给获取结果出现错误时，能以此给出错误提示
    options.user = true
    // options中没有lazy，（咦，好像watch的options中也可以传入lazy的，这里没有过滤,骚操作会有问题）
    // 故到watcher里会立刻计算出watcher.value值
    const watcher = new Watcher(vm, expOrFn, cb, options)
    // immediate为true，立即执行一次cb函数
    if (options.immediate) {
      cb.call(vm, watcher.value)
    }
    // 返回取消观察函数，用来停止触发回调
    return function unwatchFn () {
      watcher.teardown()
    }
  }
}

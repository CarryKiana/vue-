/* @flow */

/**
 * Check if a string starts with $ or _
 */
// 判断是否是保留的字符，这里是把$跟_当作保留字符留作他用了
export function isReserved (str: string): boolean {
  const c = (str + '').charCodeAt(0)
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
// 封装定义对象属性的方法,运用了门面模式(或叫外观模式),目的是简化调用方式
export function def (obj: Object, key: string, val: any, enumerable?: boolean) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  })
}

/**
 * Parse simple path.
 */
// \w 等价于 a-zA-Z0-9
const bailRE = /[^\w.$]/
// 用来解析简单的对象路径，比如说有一个对象a = { b: { c: 1 } },需求解析的路径是'b.c',
// 那么调用func = parsePath('b.c'),此时segments为['b', 'c'],等于说是把对象属性每一层的键转换存入一维数组了
// 而调用func(a)就是用来获取a.b.c的值
export function parsePath (path: string): any {
  if (bailRE.test(path)) {
    return
  }
  const segments = path.split('.')
  return function (obj) {
    for (let i = 0; i < segments.length; i++) {
      if (!obj) return
      obj = obj[segments[i]]
    }
    return obj
  }
}

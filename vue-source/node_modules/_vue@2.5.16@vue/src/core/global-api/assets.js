/* @flow */

import { ASSET_TYPES } from 'shared/constants'
import { isPlainObject, validateComponentName } from '../util/index'

export function initAssetRegisters (Vue: GlobalAPI) {
  /**
   * Create asset registration methods.
   */
  // 注册Vue.directive、Vue.filter、Vue.component方法
  // 注册时会判断,如果是Vue.component方法,在非生产环境下调用会先检测是否是合法的组件名
  // Vue.component方法会判断definition（配置对象或函数）是不是对象，如果是的话会在definition设置组件名称，之后调用Vue.extend根据此对象拓展成组件
  // Vue.directive方法会判断definition是否是函数，是函数时会标准化为directive的配置格式
  // 之后无论哪个方法，处理完的definition会挂到this.options上方便获取
  // 调用这些方法时会做判断:如果没有传入definition（配置对象或函数）,即是获取对应的全局过滤器、组件、指令return this.options[type + 's'][id]
  ASSET_TYPES.forEach(type => {
    Vue[type] = function (
      id: string,
      definition: Function | Object
    ): Function | Object | void {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production' && type === 'component') {
          validateComponentName(id)
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id
          definition = this.options._base.extend(definition)
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition }
        }
        this.options[type + 's'][id] = definition
        return definition
      }
    }
  })
}

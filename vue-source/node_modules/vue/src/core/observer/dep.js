/* @flow */

import type Watcher from './watcher'
import { remove } from '../util/index'

let uid = 0

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
// dep是一个可观察的（依赖对象），可以有多个指令订阅它
// 个人感觉dep像是一个创建集中管理观察对象的容器类
// dep就是担任发布订阅模式中的观察者角色
export default class Dep {
  // 静态对象target是一个watcher对象，暂不知道什么用
  // number类型id，作为区分各个dep的身份标志
  // subs是用来存储watcher对象的数组
  static target: ?Watcher;
  id: number;
  subs: Array<Watcher>;
  // 构造函数，在新建一个dep即new Dep()的时候会为这个新对象分配一个id作为标志，同时初始化watcher对象数组
  constructor () {
    this.id = uid++
    this.subs = []
  }
  // 往存储数组中添加一个watcher对象
  addSub (sub: Watcher) {
    this.subs.push(sub)
  }
  // 在存储数组中删除指定的watcher对象
  removeSub (sub: Watcher) {
    remove(this.subs, sub)
  }
  // 收集依赖
  depend () {
    if (Dep.target) {
      Dep.target.addDep(this)
    }
  }
  // 通知，即遍历存储watcher的数组，依次执行watcher的更新方法
  notify () {
    // stabilize the subscriber list first
    const subs = this.subs.slice()
    for (let i = 0, l = subs.length; i < l; i++) {
      subs[i].update()
    }
  }
}

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
// 用来保存当前正在被评估（评估？）的watcher对象
// 这个是全局且唯一的，因为任何时候都只有一个正在被评估的watcher对象
Dep.target = null
// 用来保存target的栈（先进先出）
const targetStack = []
// 把Dep.target指向新的target，之前的Dep.target先存进栈里
export function pushTarget (_target: ?Watcher) {
  if (Dep.target) targetStack.push(Dep.target)
  Dep.target = _target
}
// 从栈里取出之前的target并让Dep.target指向它
export function popTarget () {
  Dep.target = targetStack.pop()
}

/* @flow */
// 引入watcher类型，ts用来做变量类型检查
import type Watcher from './watcher'
// 引入配置
import config from '../config'
// 引入调用生命周期函数的函数,激活子组件
import { callHook, activateChildComponent } from '../instance/lifecycle'
// 引入工具函数
// warn 警告提示函数
// nextTick 下一轮执行函数，位于util/next-tick.js
// devtools表示是否存在开发者工具,存在则是开发者工具对象,位于util/env.js
import {
  warn,
  nextTick,
  devtools
} from '../util/index'
// 最大更新数
export const MAX_UPDATE_COUNT = 100
// 存储观察者的队列
const queue: Array<Watcher> = []
// 存储激活状态的组件数组
const activatedChildren: Array<Component> = []
// 状态存储表,用来判断是否已经存在相同的需要更新的watcher对象
let has: { [key: number]: ?true } = {}
let circular: { [key: number]: number } = {}
let waiting = false
let flushing = false
let index = 0

/**
 * Reset the scheduler's state.
 */
// 重置调度器的状态
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0
  has = {}
  if (process.env.NODE_ENV !== 'production') {
    circular = {}
  }
  waiting = flushing = false
}

/**
 * Flush both queues and run the watchers.
 */
// 遍历执行调度器的队列
function flushSchedulerQueue () {
  flushing = true
  let watcher, id

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  // 刷新前对队列进行排序(这里的刷新有一种处理完毕后清空重置的意味)
  // 这样可以确保:
  // 1、组件从父级更新到子级。（因为父级总是在子级之前创建）
  // 2、组件的用户监视程序在其渲染监视程序之前执行。（因为用户监视程序是在渲染监视程序之前创建）
  // 3、如果在父组件的监视程序运行期间销毁了某个组件，则可以跳过其监视程序
  queue.sort((a, b) => a.id - b.id)

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  // 这里没有缓存长度是因为在运行监视程序时可能会往队列里添加更多的监视程序
  // 依次取出队列里的watcher，消除has里的记录并执行watcher更新视图方法
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index]
    id = watcher.id
    has[id] = null
    watcher.run()
    // in dev build, check and stop circular updates.
    // 非生产环境下，检查并禁止循环更新
    // watcher更新了多次，我们只要最后run更新视图一次就好了，这样更高效，所以用has来判断
    // 而在watcher更新视图时，has里的标记被清空了，但是在更新的同时，可能相同的watcher又被触发从而加入队列、加入has
    // 所以给循环更新的组件计数，如果在全部视图更新前，watcher更新超过100次，那么就提示报错，同时跳出循环
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? `in watcher with expression "${watcher.expression}"`
              : `in a component render function.`
          ),
          watcher.vm
        )
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  // 重置前保留队列的副本(这些是视图更新完毕后需要触发生命周期的)
  // 使用完后会被垃圾回收机制回收，故不用重置,下次进来执行又是新的
  const activatedQueue = activatedChildren.slice()
  const updatedQueue = queue.slice()
  // 重置调度器状态
  resetSchedulerState()

  // call component updated and activated hooks
  // 调用组件的activated跟updated生命周期
  callActivatedHooks(activatedQueue)
  callUpdatedHooks(updatedQueue)

  // devtool hook
  // 存在开发者工具并且允许运行开发者工具时，触发开发者工具更新
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush')
  }
}
// 遍历更新队列并调用updated生命周期
// vm._isMounted用来判断是否已经挂载了，没挂载的不用去更新视图
// 什么情况下watcher.vm._watcher会不等于watcher？
function callUpdatedHooks (queue) {
  let i = queue.length
  while (i--) {
    const watcher = queue[i]
    const vm = watcher.vm
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated')
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
// 在新老虚拟节点树比较的过程中，对保持激活状态的组件进行排队进栈保存
// 在比较修补完整哥个树后，将对这个队列进行处理（触发生命周期等），这里仅做收集
// activatedChildren存在当前命名空间下，构成闭包
export function queueActivatedComponent (vm: Component) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  // 现在此处将标记组件的非活动态置为false（即表示当前组件处于活动态）,
  // 以便后续渲染函数可以依赖于检查它是否在非活动树中
  vm._inactive = false
  activatedChildren.push(vm)
}
// 遍历激活队列并调用activated生命周期
function callActivatedHooks (queue) {
  for (let i = 0; i < queue.length; i++) {
    queue[i]._inactive = true
    activateChildComponent(queue[i], true /* true */)
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
// 将观察程序加入观察程序队列。
// 具有重复id的作业将被跳过,除非在刷新队列时将其推入队列
export function queueWatcher (watcher: Watcher) {
  const id = watcher.id
  // 1、如果有相同的watcher在之前加入队列则什么都不做，反之接着进行2；
  // 2、如果还没开始执行调度程序更新视图,那么把当前的watcher加入队列.
  // 如果已经开始执行调度程序更新视图,则需要做些处理，因为开始执行调度程序时队列会根据id重小到大排序
  // 故从后往前比较队列中的watcher.id，找到当前watcher该在的位置并加入队列
  if (has[id] == null) {
    has[id] = true
    if (!flushing) {
      queue.push(watcher)
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      let i = queue.length - 1
      while (i > index && queue[i].id > watcher.id) {
        i--
      }
      queue.splice(i + 1, 0, watcher)
    }
    // queue the flush
    // 假如没在等待(执行)，执行nexttick(确保每一轮事件循环视图更新调度程序只执行一次)
    if (!waiting) {
      waiting = true
      nextTick(flushSchedulerQueue)
    }
  }
}

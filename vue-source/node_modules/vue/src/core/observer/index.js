/* @flow */

import Dep from './dep'
import VNode from '../vdom/vnode'
import { arrayMethods } from './array'
import {
  def,
  warn,
  hasOwn,
  hasProto,
  isObject,
  isPlainObject,
  isPrimitive,
  isUndef,
  isValidArrayIndex,
  isServerRendering
} from '../util/index'
// 获取arrayMethods上的自有属性的key值，其实就是获取被改成响应式的实例上的数组变异方法名
const arrayKeys = Object.getOwnPropertyNames(arrayMethods)

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
// 在某些情况下我们可能希望在组件的更新中禁用观察，故定义一个变量来做控制开关
export let shouldObserve: boolean = true
// 转换是否观测状态
export function toggleObserving (value: boolean) {
  shouldObserve = value
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
// 观测类被用来（创建观察者实例）附加到每个被观测的对象上，
// 一旦附加完成，观测实例会将目标上的属性转换成寄存器形式（getter跟setter）
// 目的是为了收集依赖跟触发更新
export class Observer {
  value: any;
  dep: Dep;
  vmCount: number; // number of vms that has this object as root $data

  constructor (value: any) {
    this.value = value
    this.dep = new Dep()
    this.vmCount = 0
    // 为value添加__ob__属性,指向当前的观测实例
    def(value, '__ob__', this)
    // 如果value是数组，就把改造过的数组方法扩充进value,之后观测每一个数组元素
    if (Array.isArray(value)) {
      // 兼容性判断，如果有原型链，就把改造的方法放原型，没有的话就当作属性定义进value里
      const augment = hasProto
        ? protoAugment
        : copyAugment
      augment(value, arrayMethods, arrayKeys)
      this.observeArray(value)
    // 如果value是对象，转换对象的属性为寄存器
    } else {
      this.walk(value)
    }
  }

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  // 遍历每个属性并将其转换为寄存器,仅当value的类型是对象时才会调用此方法
  walk (obj: Object) {
    const keys = Object.keys(obj)
    for (let i = 0; i < keys.length; i++) {
      defineReactive(obj, keys[i])
    }
  }

  /**
   * Observe a list of Array items.
   */
  // 为数组的每个元素创建观测实例
  observeArray (items: Array<any>) {
    for (let i = 0, l = items.length; i < l; i++) {
      observe(items[i])
    }
  }
}

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
// 拦截原型链来增强(或扩充)目标对象或数组,即把target的原型指向src，这样target可以访问src上的方法
function protoAugment (target, src: Object, keys: any) {
  /* eslint-disable no-proto */
  target.__proto__ = src
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
// 定义隐藏的属性来扩充目标对象或数组
/* istanbul ignore next */
function copyAugment (target: Object, src: Object, keys: Array<string>) {
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i]
    def(target, key, src[key])
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
// 尝试为value创建一个观测实例，如果成功的话，返回新的观测实例；
// 如果value原先已经有了一个观测实例，返回已经存在的那一个
export function observe (value: any, asRootData: ?boolean): Observer | void {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  let ob: Observer | void
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value)
  }
  if (asRootData && ob) {
    ob.vmCount++
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
// 在对象上定义一个响应式的属性
export function defineReactive (
  obj: Object,
  key: string,
  val: any,
  customSetter?: ?Function,
  shallow?: boolean
) {
  const dep = new Dep()
  // Object.getOwnPropertyDescriptor返回指定对象上自有属性对应的属性描述符
  // 不存在的属性返回undefined
  const property = Object.getOwnPropertyDescriptor(obj, key)
  // 如果属性描述符存在（即属性在对象上直接存在）且不可配置，就直接返回
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  const getter = property && property.get
  if (!getter && arguments.length === 2) {
    val = obj[key]
  }
  const setter = property && property.set

  let childOb = !shallow && observe(val)
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      const value = getter ? getter.call(obj) : val
      if (Dep.target) {
        dep.depend()
        if (childOb) {
          childOb.dep.depend()
          if (Array.isArray(value)) {
            dependArray(value)
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      const value = getter ? getter.call(obj) : val
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter()
      }
      if (setter) {
        setter.call(obj, newVal)
      } else {
        val = newVal
      }
      childOb = !shallow && observe(newVal)
      dep.notify()
    }
  })
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
// 在对象target上设置属性key，如果属性不存在的话，当作新属性添加进对象并触发更改通知
export function set (target: Array<any> | Object, key: any, val: any): any {
  // 如果不是生产环境同时target是undefined或null或者是原始值，报出警告
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(`Cannot set reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  // 如果目标对象target是数组并且key是一个有效的数组下标，
  // 下标key比原有长度大时，改变数组长度为key
  // 之后把值替换进数组
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key)
    // splice已经被扩充改造过，所以会触发更改通知
    target.splice(key, 1, val)
    return val
  }
  // 如果key是目标对象target的自有属性（不在原型链上）,覆盖原有的值,target已经是响应的了，修改会触发通知
  if (key in target && !(key in Object.prototype)) {
    target[key] = val
    return val
  }
  // 如果target对象上没有这个属性
  // 缓存target的观测实例
  const ob = (target: any).__ob__
  // target._isVue为true表明target是一个经过new Vue创建出来的vue实例
  // ob.vmCount会在尝试创建观测实例时变更（可能是运行时数据更新引起重新观测）,而在新建之初其值为0
  if (target._isVue || (ob && ob.vmCount)) {
    // 避免在运行时向vue实例或者其根$data添加响应式属性(有什么后果吗？)
    // 看样子应该是规范写法问题，有什么需要添加的属性就应该直接在初始化的时候写在data里
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    )
    return val
  }
  // 如果target对象上没有这个属性,并且没有观测实例（说明不是响应式的）,直接赋值返回
  if (!ob) {
    target[key] = val
    return val
  }
  // 如果target对象上没有这个属性,而有观测实例（说明是响应式的），定义响应式属性并触发通知
  defineReactive(ob.value, key, val)
  ob.dep.notify()
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
// 删除属性并在必要时触发更改
export function del (target: Array<any> | Object, key: any) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    // 没办法为undefined，null，或者原始值删除响应式属性
    warn(`Cannot delete reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  // 如果target是数组并且key是有效的数组下标，移除该元素
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    // splice已经被扩充改造过，所以会触发更改通知
    target.splice(key, 1)
    return
  }
  const ob = (target: any).__ob__
  if (target._isVue || (ob && ob.vmCount)) {
    // 避免删除vue实例或者其根$data上的属性,把这个属性值置为空就可以啦
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    )
    return
  }
  // 原本就不存在这个属性，不作处理
  if (!hasOwn(target, key)) {
    return
  }
  // 存在时就删除属性
  delete target[key]
  // 存在观测实例时触发更改通知
  if (!ob) {
    return
  }
  ob.dep.notify()
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
// 我们不能像访问属性（getter）那样拦截数组元素的访问，故在操作数组的收获收集数组元素的依赖项
function dependArray (value: Array<any>) {
  for (let e, i = 0, l = value.length; i < l; i++) {
    e = value[i]
    e && e.__ob__ && e.__ob__.dep.depend()
    if (Array.isArray(e)) {
      dependArray(e)
    }
  }
}

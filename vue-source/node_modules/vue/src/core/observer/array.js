/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */
// def 定义对象属性，位于util/lang.js
import { def } from '../util/index'
// 缓存数组原型，并暴露出一个继承数组原型对象的对象，改变这个对象上的方法不会影响到原型
// 这里是借助并覆盖数组变异方法，使调用数组变异方法时也能触发视图更新
const arrayProto = Array.prototype
export const arrayMethods = Object.create(arrayProto)

const methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
]

/**
 * Intercept mutating methods and emit events
 */
// 遍历需要改变的变异方法，目的是在调用这些方法时，能先截获并发出事件
methodsToPatch.forEach(function (method) {
  // cache original method
  const original = arrayProto[method]
  def(arrayMethods, method, function mutator (...args) {
    // 调用原始的方法求值
    const result = original.apply(this, args)
    const ob = this.__ob__
    let inserted
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args
        break
      case 'splice':
        inserted = args.slice(2)
        break
    }
    // 如果是增添数组的操作，为新加入的元素搜集依赖项
    if (inserted) ob.observeArray(inserted)
    // notify change
    // 发出更改通知
    ob.dep.notify()
    return result
  })
})

/* @flow */

import { warn } from 'core/util/index'
import { cached, isUndef, isPlainObject } from 'shared/util'
// 规范化事件名称,即这个函数会解析事件名称，转换成对象的形式缓存并返回
// 按顺序转换字符串name
// passive(被动的),对应以'&'开头,暂不知道表示啥,可能是保留的，因为 add (event, fn, once)，没有用到它
// once(一次),对应以'~'开头，表示事件只执行一次
// capture(捕获),对应以'!'开头，暂不知道表示啥,可能是保留的，因为 add (event, fn, once)，没有用到它
const normalizeEvent = cached((name: string): {
  name: string,
  once: boolean,
  capture: boolean,
  passive: boolean,
  handler?: Function,
  params?: Array<any>
} => {
  const passive = name.charAt(0) === '&'
  name = passive ? name.slice(1) : name
  const once = name.charAt(0) === '~' // Prefixed last, checked first
  name = once ? name.slice(1) : name
  const capture = name.charAt(0) === '!'
  name = capture ? name.slice(1) : name
  return {
    name,
    once,
    capture,
    passive
  }
})
// 创建函数调用程序，返回invoker函数,调用时依次执行fns
export function createFnInvoker (fns: Function | Array<Function>): Function {
  function invoker () {
    const fns = invoker.fns
    if (Array.isArray(fns)) {
      const cloned = fns.slice()
      for (let i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments)
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns
  return invoker
}

export function updateListeners (
  on: Object,
  oldOn: Object,
  add: Function,
  remove: Function,
  vm: Component
) {
  let name, def, cur, old, event
  // 遍历现有的附加事件,处理或注册监听器
  for (name in on) {

    // def做下缓存，cur为对应的现有附加的每个事件的监听器
    def = cur = on[name]
    // old是对应的原有附加的每个事件的监听器
    old = oldOn[name]
    // 规范化事件名称
    event = normalizeEvent(name)
    // 假如是weex环境下并且现有附加事件的监听器是个对象,修正一下让cur指向现有附加的每个事件的监听器
    /* istanbul ignore if */
    if (__WEEX__ && isPlainObject(def)) {
      cur = def.handler
      event.params = def.params
    }
    // 如果需要附加的事件是null或undefined，在非生产环境下会报错
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        `Invalid handler for event "${event.name}": got ` + String(cur),
        vm
      )
      // 如果存在需要附加的事件，而原有事件上没有监听器,那么为其注册自定义事件
    } else if (isUndef(old)) {
      // cur.fns存在，说明cur不是真正的监听器,那么创建函数调用程序并修正cur的正确指向
      // on是引用传参，修改会同时反馈到vm.$options._parentListeners上
      // (初始化实例自定义事件的时候oldOn是个空对象，所以old是undefined，初始化自定义事件的时候走这个分支)
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur)
      }
      // 注册自定义事件
      add(event.name, cur, event.once, event.capture, event.passive, event.params)
      // 如果存在需要附加的事件，而原有事件上存在监听器，把需要附加的事件挂载原有事件监听器的fns上，对应事件将指向原有监听器
      // 这操作看不懂,还没接触到使用场合
    } else if (cur !== old) {
      old.fns = cur
      on[name] = old
    }
  }
  // 遍历原有的附加事件，如果在现有需要附加的事件中没有这个事件，那么移除监听器
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name)
      remove(event.name, oldOn[name], event.capture)
    }
  }
}

/* @flow */
// 导入所需的共享工具方法，no（始终返回false）noop（空函数）identity（始终返回本身）
import {
  no,
  noop,
  identity
} from 'shared/util'
// 导入生命周期函数钩子标志
import { LIFECYCLE_HOOKS } from 'shared/constants'
// 定义全局配置的类型（必须包含的属性声明）
export type Config = {
  // user // 用户相关属性
  optionMergeStrategies: { [key: string]: Function }; // 自定义合并策略选项
  silent: boolean; // 是否取消Vue所有日志跟警告
  productionTip: boolean; // 是否在启动时生成生产提示
  performance: boolean; // 是否启用浏览器开发工具的性能追踪
  devtools: boolean; // 是否允许vue-devtools检查代码
  errorHandler: ?(err: Error, vm: Component, info: string) => void; // 用来处理组件各个阶段未捕获错误的函数
  warnHandler: ?(msg: string, vm: Component, trace: string) => void; // 用来处理开发环境下vue运行时警告的自定义函数
  ignoredElements: Array<string | RegExp>; // 使vue忽略在vue之外的自定义元素，否则它会当作你忘记注册全局组件或拼错名称从而报出警告
  keyCodes: { [key: string]: number | Array<number> }; // 给v-on自定义键位别名

  // platform // 平台相关
  isReservedTag: (x?: string) => boolean; // 判断是否是保留标签
  isReservedAttr: (x?: string) => boolean; // 判断是否是保留属性
  parsePlatformTagName: (x: string) => string; // 解析平台标签名称
  isUnknownElement: (x?: string) => boolean; // 判断是否是未知的元素
  getTagNamespace: (x?: string) => string | void; // 获取标签命名空间
  mustUseProp: (tag: string, type: ?string, name: string) => boolean; // 判断是否需使用prop

  // legacy
  _lifecycleHooks: Array<string>; // 生命周期
};

export default ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),  // 自定义合并策略选项初始化（空对象）

  /**
   * Whether to suppress warnings.
   */
  silent: false, // 不取消警告

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production', // 只有生产环境下才生成生产提示

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production', // 非生产环境时允许vue-devtools检查代码

  /**
   * Whether to record perf
   */
  performance: false, // 不启用性能追踪

  /**
   * Error handler for watcher errors
   */
  errorHandler: null, // 错误捕获函数缺省

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null, // 警告提示函数缺省

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [], // 初始化要忽略的自定义元素数组

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null), // v-on键位自定义别名数组初始化

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no, // 判断是否是保留标签(函数返回false，函数可被覆盖重写)

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no, // 判断是否是保留属性(函数返回false，函数可被覆盖重写)

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no, // 判断是否是未识别元素(函数返回false，函数可被覆盖重写)

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop, // 获取标签命名空间(空函数，可被覆盖重写)

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity, // 解析平台标签(返回自身，函数可被覆盖重写)

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no, // 判断是否需使用prop(函数返回false，函数可被覆盖重写)

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS // 包含生命周期的数组
}: Config)

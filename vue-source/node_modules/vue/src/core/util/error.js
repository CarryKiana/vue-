/* @flow */

import config from '../config'
import { warn } from './debug'
import { inBrowser, inWeex } from './env'
// 错误处理
// errorCaptured生命周期钩子,用来处理从子孙组件中捕获到的错误
// config.errorHandler用来处理各个阶段未捕获到的错误
// 简言之，这个方法的作用就是从当前组件的父组件开始，倘若组件有定义了捕获子孙组件错误处理的函数，那么就执行这些函数，capture控制循环的继续与否
// 出错或者handleError执行到末尾，在调用一下处理全局错误处理函数
export function handleError (err: Error, vm: any, info: string) {
  if (vm) {
    let cur = vm
    while ((cur = cur.$parent)) {
      const hooks = cur.$options.errorCaptured
      if (hooks) {
        for (let i = 0; i < hooks.length; i++) {
          try {
            const capture = hooks[i].call(cur, err, vm, info) === false
            if (capture) return
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook')
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info)
}
// 如果有定义未捕获错误处理函数，就先执行,执行出错就打印错误
// 没有定义错误处理函数的，直接打印错误
function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      logError(e, null, 'config.errorHandler')
    }
  }
  logError(err, vm, info)
}
// 打印错误
// 非生产环境下会出现警告提示
// 在浏览器下货在微信端下会在控制台打印错误，其余的环境直接把错误抛出
function logError (err, vm, info) {
  if (process.env.NODE_ENV !== 'production') {
    warn(`Error in ${info}: "${err.toString()}"`, vm)
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err)
  } else {
    throw err
  }
}

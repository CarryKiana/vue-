/* @flow */

// can we use __proto__?
// 判断能否使用__proto__属性,这个属性指向其构造函数的原型
export const hasProto = '__proto__' in {}

// Browser environment sniffing
// 嗅探是否是浏览器环境
// 判断window是否存在来确定是否是浏览器环境
export const inBrowser = typeof window !== 'undefined'
// 判断WXEnvironment是否存在并且是否拥有平台标志来确定是否是微信环境
export const inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform
// 获取微信内置浏览器内核信息,用来区分系统类型
export const weexPlatform = inWeex && WXEnvironment.platform.toLowerCase()
// 获取浏览器内核信息，用来区分各个浏览器
export const UA = inBrowser && window.navigator.userAgent.toLowerCase()
// 判断是不是IE
export const isIE = UA && /msie|trident/.test(UA)
// 判断是不是IE9
export const isIE9 = UA && UA.indexOf('msie 9.0') > 0
// 判断是不是Edge
export const isEdge = UA && UA.indexOf('edge/') > 0
// 判断是不是安卓系统
export const isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android')
// 判断是不是ios系统
export const isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios')
// 判断是不是谷歌浏览器
export const isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge

// Firefox has a "watch" function on Object.prototype...
// 这里说火狐浏览器下对象原型拥有watch方法，这里应当指火狐国际版的，即只有Gecko内核才存在Object.prototype.watch方法
// obj.watch(prop, handler), prop想要监视值是否发生变化的指定对象的某个属性的属性名称,handler当指定的属性发生变化时执行的回调函数
export const nativeWatch = ({}).watch
// 标志位,这里可能是用supportsPassive的值来确定下面的try是否执行成功不报错
// window.addEventListener方法具有多态，这里用的是window.addEventListener('test-passive', null, opts)，事件类型，回调，opts配置对象
// passive为true时表示回调里永远不会调用preventDefault(),如果回调里仍然调用了preventDefault(),会被客户端忽略并抛出警告
export let supportsPassive = false
if (inBrowser) {
  try {
    const opts = {}
    Object.defineProperty(opts, 'passive', ({
      get () {
        /* istanbul ignore next */
        supportsPassive = true
      }
    }: Object)) // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts)
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
// 在服务端渲染能设置vue的环境之前，相关的vue依赖必须先准备好，所以这里需要惰性执行(故撸成一个函数等待时机调用)
// 判断是不是在服务端的标志位
let _isServer
// 判断是不是非浏览器端、非微信端、同时存在global全局对象，是的话根据global全局对象的vue环境变量来判断是否在服务端，否则为false
export const isServerRendering = () => {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server'
    } else {
      _isServer = false
    }
  }
  return _isServer
}

// detect devtools
// 监测开发者工具,存在开发者工具的话，会为window.__VUE_DEVTOOLS_GLOBAL_HOOK__赋值,即开发者工具的句柄
export const devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__
// 判断是否是原生方法
/* istanbul ignore next */
export function isNative (Ctor: any): boolean {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}
// 判断是否同时存在原生的Symbol和Reflect构造函数
export const hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys)
// 判断是否存在原生的Set构造函数，存在的话直接导出以供其他模块使用，不存在的话打补丁模拟一个再导出
let _Set
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = class Set implements SimpleSet {
    set: Object;
    constructor () {
      this.set = Object.create(null)
    }
    has (key: string | number) {
      return this.set[key] === true
    }
    add (key: string | number) {
      this.set[key] = true
    }
    clear () {
      this.set = Object.create(null)
    }
  }
}

interface SimpleSet {
  has(key: string | number): boolean;
  add(key: string | number): mixed;
  clear(): void;
}

export { _Set }
export type { SimpleSet }

/* @flow */
/* globals MessageChannel */

import { noop } from 'shared/util'
import { handleError } from './error'
import { isIOS, isNative } from './env'
// callbacks缓存需要在下一刻执行的函数,pending表示代办，即为false表示处理完了
const callbacks = []
let pending = false
// 依次处理需要在下一刻执行的函数，重置缓存数组，改标志位表明处理这一轮处理结束
function flushCallbacks () {
  pending = false
  const copies = callbacks.slice(0)
  callbacks.length = 0
  for (let i = 0; i < copies.length; i++) {
    copies[i]()
  }
}

// Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).
// 这里我们有使用微任务和宏任务的异步延迟包装器。
// 而在小于2.4的vue版本中，我们到处都使用微任务，但在某些情况下，微任务的优先级太高，如在一些连续事件之间（如#4521、#6690）甚至在同一事件的冒泡（#6566）之间触发。
// 但是，当状态在重新绘制之前发生更改时（例如#6813，处于转换状态），到处使用宏任务也有一些微妙的问题。
// 所以这里我们默认使用微任务，但在以下情况就提供一个方法来强制使用宏任务。
let microTimerFunc
let macroTimerFunc
let useMacroTask = false

// Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
// 确定宏任务延迟实现(即根据不同的环境来重写宏任务函数)
// 从技术上来讲，setImmediate 应该是理想的选择，但它仅在IE中可用。
// 在同一循环中触发所有DOM事件后，唯一一致地对回调进行排队的垫片是使用消息通道MessageChannel
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // 如果原生存在setImmediate方法,宏任务函数就是把缓存数组函数传入setImmediate执行
  macroTimerFunc = () => {
    setImmediate(flushCallbacks)
  }
} else if (typeof MessageChannel !== 'undefined' && (
  isNative(MessageChannel) ||
  // PhantomJS
  MessageChannel.toString() === '[object MessageChannelConstructor]'
)) {
  // 不存在setImmediate时，如果原生存在MessageChannel或者是在JS平台上存在MessageChannel，
  // 创建一个消息通道(消息通道有两个port。可以互相发送、接受处理消息)
  // 这里就是利用消息通道的port2向port1发送消息(发什么没关系,主要是为了触发)，触发port1的接受消息事件,执行缓存数组里的函数
  // 然后消息通道应当也是属于异步的宏任务（应该不是多线程吧？），会加入事件循环
  const channel = new MessageChannel()
  const port = channel.port2
  channel.port1.onmessage = flushCallbacks
  macroTimerFunc = () => {
    port.postMessage(1)
  }
} else {
  // 如果以上都不满足，直接用setTimeout
  /* istanbul ignore next */
  macroTimerFunc = () => {
    setTimeout(flushCallbacks, 0)
  }
}

// Determine microtask defer implementation.
// 确定微任务的延迟实现
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  // 原生存在Promise时，利用Promise.then把缓存数组的函数加入事件循环异步微任务事件队列
  const p = Promise.resolve()
  microTimerFunc = () => {
    p.then(flushCallbacks)
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    // 在有问题的uiwebview中，promise.then执行后不会完全中断,致使回调被放入微任务队列中但（在此任务循环）不会执行
    // 因此通过添加一个空计时器来强制执行微任务
    if (isIOS) setTimeout(noop)
  }
} else {
  // fallback to macro
  // 如果不原生存在promise,微任务的实现等同于宏任务的实现(降级处理)
  microTimerFunc = macroTimerFunc
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */
// 包装一个函数，这样当触发器中的任何代码状态发生改变，这些变化将使用宏任务而不是微任务排队(为什么？用在何处？)
export function withMacroTask (fn: Function): Function {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true
    const res = fn.apply(null, arguments)
    useMacroTask = false
    return res
  })
}
// 包装指定的函数cb并放入缓存数组等待异步执行
// 若pending为false，改为true，同时调用异步延迟函数，表示目前异步队列已有函数，再有函数添加进缓存数组时不会重复调用异步延迟函数
// 默认使用微任务队列执行，当useMacroTask为true时强制使用宏任务队列执行
// 如果缺省cb函数同时又存在Promise对象,返回一个promise，nextTick.then(callback)中的callback会被加入微任务队列等待执行
export function nextTick (cb?: Function, ctx?: Object) {
  let _resolve
  callbacks.push(() => {
    if (cb) {
      try {
        cb.call(ctx)
      } catch (e) {
        handleError(e, ctx, 'nextTick')
      }
    } else if (_resolve) {
      _resolve(ctx)
    }
  })
  if (!pending) {
    pending = true
    if (useMacroTask) {
      macroTimerFunc()
    } else {
      microTimerFunc()
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(resolve => {
      _resolve = resolve
    })
  }
}

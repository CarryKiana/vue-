/* @flow */

import config from '../config'
import { warn } from './debug'
import { nativeWatch } from './env'
import { set } from '../observer/index'

import {
  ASSET_TYPES,
  LIFECYCLE_HOOKS
} from 'shared/constants'

import {
  extend,
  hasOwn,
  camelize,
  toRawType,
  capitalize,
  isBuiltInTag,
  isPlainObject
} from 'shared/util'

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
// 合并策略选项是一个用来处理父选项值跟子选项值如何合并成最终选项的函数
const strats = config.optionMergeStrategies

/**
 * Options with restrictions
 */
// 然后定制诸如el、propsData、data，filter，watch等的合并处理逻辑
// 如果不是在生产环境，el跟propsData(创建实例时传递的props数据，用于测试)的处理是一样的，按照默认的合并逻辑处理，
// 只是在之前加入了是不是通过new来创建的，不是的话给出警告
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        `option "${key}" can only be used during instance ` +
        'creation with the `new` keyword.'
      )
    }
    return defaultStrat(parent, child)
  }
}

/**
 * Helper that recursively merges two data objects together.
 */
// 递归合并两个数据对象的辅助程序
function mergeData (to: Object, from: ?Object): Object {
  // 不存在需要复制的源对象，不用合并直接返回目标对象
  if (!from) return to
  let key, toVal, fromVal
  const keys = Object.keys(from)
  // 遍历源对象的每一个属性:
  // 如果目标对象上不存在这个属性，则为目标对象创建这个属性
  // 如果对象上存在这个属性，并且源对象跟目标对象上这个属性的值都是纯对象,递归合并
  // 对象上存在这个属性的其他情况不做处理（即保留原有的目标对象的属性值）
  for (let i = 0; i < keys.length; i++) {
    key = keys[i]
    toVal = to[key]
    fromVal = from[key]
    if (!hasOwn(to, key)) {
      set(to, key, fromVal)
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal)
    }
  }
  return to
}

/**
 * Data
 */
// data选项合并函数，用来合并数据或函数,返回值为一个函数，只有真正调用才会调用真正的合并操作
export function mergeDataOrFn (
  parentVal: any,
  childVal: any,
  vm?: Component
): ?Function {
  // 不存在vm实例，即是通过Vue.extend调用
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    // 如果子组件data选项不存在，返回父组件data选项
    if (!childVal) {
      return parentVal
    }
    // 如果子组件data选项存在，父组件不存在，返回子组件data选项
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    // 当子组件data选项跟父组件data选项同时存在时，我们需要返回一个函数，该函数返回两个函数运行后结果的合并，
    // 这里本身其实并不需要去检查父组件data选项parentval是否是函数，因为通过Vue.extend时，parentval本身就是函数（继承自原先的）
    // 通过vue.extend方法，在之前已对childVal做了判断，程序运行到这里childVal要么不存在，要么是函数
    return function mergedDataFn () {
      // 运行的时候会返回合并后的结果，就是递归的的把继承来的属性塞进childVal里面
      // 如果是函数的话运行一下取到函数的返回结果作为参数
      // 调用call用意可能是把this当作参数传入函数运行，但不知道会有什么作用。
      // mergedDataFn是通过何种方式来调用？是通过new，还是call抑或是普通调用
      // 此时this将分别指向新建的对象{}、传入的上下文、以及window；new跟普通调用都感觉没啥意义，很大的可能就是call、apply或bind了
      // 是call没错了，新建实例的时候this就是vm
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      // 新建实例时执行的合并函数,同样是先取到data结果来合并返回
      const instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal
      const defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}
// 定义data选项的合并策略，data选项是一个函数而不是对象，确保了新建的组件data都是一个数据副本，不会出现多个组件共用一个数据源的情况（更改data数据不会相互影响）
// 总的来说无论vm存不存在，只要子组件的data选项是函数，都会调用内置的data选项合并函数，子组件的data选项不存在或者不是函数就返回父组件data选项
strats.data = function (
  parentVal: any,
  childVal: any,
  vm?: Component
): ?Function {
  // 在Vue.extend方法里是这么合并属性的Sub.options = mergeOptions(Super.options, extendOptions)
  // 故在Vue的组件继承树上的merge是不存在vm实例的
  // 如果vm实例不存在，同时子组件的data选项存在且不是函数，返回父组件的data选项（不是生产环境还会报出警告）
  // 如果vm实例不存在，子组件data选项不存在、子组件data选项是函数的情况下，调用data选项合并函数(不带vm参数)
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      )

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }
  // 如果vm实例存在，即通过new Vue()运行，调用data选项合并函数（带vm参数）
  return mergeDataOrFn(parentVal, childVal, vm)
}

/**
 * Hooks and props are merged as arrays.
 */
// 生命周期合并策略函数,根据入参表示生命周期取值还可以写成数组函数的形式，每个函数都会依次执行，
// 如created: [function() { console.log(this) }, _ => { console.log(this) }],
// 此时匿名函数的this打印出来是当前vue实例，箭头函数的this打印出来是{ a: {...} }, a是当前实例的配置对象
// 合并判断规则：(===父组件(类)的说法可能不准确，它发生在merseOption的期间，所以它可能来自mixin、extend等)
// 假如当前的生命周期函数（数组）不存在，那么此生命周期函数继承父组件(类)的函数
// 假如当前的生命周期函数（数组）存在，而父组件（类）的生命周期函数不存在,那么判断一下当前的是数组还是函数，如果是函数的话包装成数组，之后返回
// 假如当前的生命周期函数（数组）存在，而父组件（类）的生命周期函数也存在,那么把当前的生命周期函数（数组）并入父组件（类）的生命周期数组并返回
function mergeHook (
  parentVal: ?Array<Function>,
  childVal: ?Function | ?Array<Function>
): ?Array<Function> {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}
// 每一个生命周期的合并策略都是一样的，合并逻辑都按mergeHook的逻辑来处理
LIFECYCLE_HOOKS.forEach(hook => {
  strats[hook] = mergeHook
})

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
// 当存在一个vm实例时（通过new Vue()实例创建）,我们需要在构造函数选项、实例选项和父选项之间进行三向合并
function mergeAssets (
  parentVal: ?Object,
  childVal: ?Object,
  vm?: Component,
  key: string
): Object {
  // 生成一个新对象，这个对象将会作为合并结果返回，假如存在父属性对象，那么这个对象将继承父属性对象的属性,这样就先将parentVal合并进来了
  const res = Object.create(parentVal || null)
  // 再判断一下是否存在childVal，不存在时直接返回res当作合并结果
  // childVal存在时，生产环境下直接进行浅拷贝，把childVal上的属性复制到res上，再把res返回
  // childVal存在时，非生产环境下需要先断言一下属性值的类型，不符合时给出警告提示,再返回res
  if (childVal) {
    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm)
    return extend(res, childVal)
  } else {
    return res
  }
}
// ASSET_TYPES即是 component, directive, filter这三个,他们的合并策略都是mergeAssets（以当前配置对象属性为目标对象，把继承的、初始构造函数的属性统统复制到目标对象上）
ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets
})

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
// 侦听器（观察者）散列不应该互相覆盖,所以这里将他们合并为数组
strats.watch = function (
  parentVal: ?Object,
  childVal: ?Object,
  vm?: Component,
  key: string
): ?Object {
  // work around Firefox's Object.prototype.watch...
  // 在Gecko内核下，存在Object.prototype.watch，所以nativeWatch要么是Object.prototype.watch，要么是undefined
  // 假如nativeWatch是undefined，parentVal === nativeWatch即是表明parentVal也是undefined，那么parentVal = undefined这个操作不会有任何影响,可以忽略,childVal同理
  // 假如nativeWatch是Object.prototype.watch，parentVal === nativeWatch表明parentVal是Object.prototype.watch，那么parentVal = undefined就是把parentVal重置为undefined， 
  // 目的是不让watch使用Object.prototype.watch，childVal同理，至于为什么不让使用Object.prototype.watch就暂时不清楚了
  if (parentVal === nativeWatch) parentVal = undefined
  if (childVal === nativeWatch) childVal = undefined
  // 如果childVal不存在，直接返回一个继承了parentVal属性的新的对象
  /* istanbul ignore if */
  if (!childVal) return Object.create(parentVal || null)
  // 如果childVal存在，在不是生产环境的情况下先断言一下属性值的类型，不是对象类型就给出警告
  if (process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm)
  }
  // 如果childVal存在而parentVal不存在则返回childVal
  if (!parentVal) return childVal
  // childVal跟parentVal都存在的情况下，就要进行二者的合并了
  // 先把parentVal的属性复制到返回结果对象上，之后遍历childVal上的每一个属性
  // 如果属性在结果对象上存在，先包装成数组
  // 如果属性在结果对象上存在(现在是一个数组)，把child加入数组
  // 不存在时结果对象上对应的属性值就是包装成数组的childVal上的对应属性值
  const ret = {}
  extend(ret, parentVal)
  for (const key in childVal) {
    let parent = ret[key]
    const child = childVal[key]
    if (parent && !Array.isArray(parent)) {
      parent = [parent]
    }
    ret[key] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child]
  }
  return ret
}

/**
 * Other object hashes.
 */
// 其他属性的合并策略就是简单的合并两个对象
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal: ?Object,
  childVal: ?Object,
  vm?: Component,
  key: string
): ?Object {
  if (childVal && process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm)
  }
  if (!parentVal) return childVal
  const ret = Object.create(null)
  extend(ret, parentVal)
  if (childVal) extend(ret, childVal)
  return ret
}
// provide最终会是一个函数，所以这里的合并策略是套用data合并函数，返回值也是一个函数
strats.provide = mergeDataOrFn

/**
 * Default strategy.
 */
// 默认的合并策略函数,如果子组件属性值存在就用子组件属性的值，否则就使用父组件的
const defaultStrat = function (parentVal: any, childVal: any): any {
  return childVal === undefined
    ? parentVal
    : childVal
}

/**
 * Validate component names
 */
// 遍历检查对象的属性是否有效
function checkComponents (options: Object) {
  for (const key in options.components) {
    validateComponentName(key)
  }
}
// 检查名称是否有效
export function validateComponentName (name: string) {
  // 组件名只能包含字母跟连字符，并且只能以字母作为开头
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'can only contain alphanumeric characters and the hyphen, ' +
      'and must start with a letter.'
    )
  }
  // 判断name是否是slot,component的其中之一,或者是保留标签(默认是返回false的no函数)
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    )
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
// 确保所有props选项语法都规范化为基于对象的格式
function normalizeProps (options: Object, vm: ?Component) {
  const props = options.props
  // 如果props不存在，不用处理直接返回
  if (!props) return
  // 创建一个空对象用来保存处理后的结果
  const res = {}
  let i, val, name
  // props可以是数组也可以是对象，针对每一种类型有不同的处理方法
  if (Array.isArray(props)) {
    // 假如props是数组的话,遍历数组中的每一个元素,
    // 数组写法是简写形式，元素只能是字符串,把字符串转换成驼峰式命名风格并以此作为属性存入res中
    // 否则的话就报错
    i = props.length
    while (i--) {
      val = props[i]
      if (typeof val === 'string') {
        name = camelize(val)
        res[name] = { type: null }
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.')
      }
    }
  } else if (isPlainObject(props)) {
    // 假如props是原始对象的话，遍历每一个属性,把属性名转换成驼峰式风格作为res对象的属性名，属性值如果是对象的话作为对应的属性值，否则作为新属性值中类型type的值
    for (const key in props) {
      val = props[key]
      name = camelize(key)
      res[name] = isPlainObject(val)
        ? val
        : { type: val }
    }
  } else if (process.env.NODE_ENV !== 'production') {
    // 既不是数组又不是对象同时又不是生产环境，报错
    warn(
      `Invalid value for option "props": expected an Array or an Object, ` +
      `but got ${toRawType(props)}.`,
      vm
    )
  }
  options.props = res
}

/**
 * Normalize all injections into Object-based format
 */
// 将所有注入规范化为基于对象的格式,provide 和 inject 主要为高阶插件/组件库提供用例
function normalizeInject (options: Object, vm: ?Component) {
  const inject = options.inject
  // inject不存在，直接返回不用处理
  if (!inject) return
  // inject存在的话先将options.inject重置为空对象避免混淆
  const normalized = options.inject = {}
  if (Array.isArray(inject)) {
    // 如果inject是数组的话，遍历每个元素，转换成{ from：key  }的形式存入结果normalized中，from属性是在可用的注入内容中搜索用的key 
    for (let i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] }
    }
  } else if (isPlainObject(inject)) {
    // 如果inject是对象的话，遍历每个属性,属性名作为结果normalized的属性名,属性值如果是对象的话拓展其属性，否则为{ from: val }
    for (const key in inject) {
      const val = inject[key]
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val }
    }
  } else if (process.env.NODE_ENV !== 'production') {
    // 假如inject既不是对象也不是数组,同时不是在生产环境下，报错
    warn(
      `Invalid value for option "inject": expected an Array or an Object, ` +
      `but got ${toRawType(inject)}.`,
      vm
    )
  }
}

/**
 * Normalize raw function directives into object format.
 */
// 将所有原始函数指令规范化为对象格式
function normalizeDirectives (options: Object) {
  // options.directives是实例可用的自定义指令哈希表
  const dirs = options.directives
  // 假如自定义指令存在，遍历每一个自定义指令，如果是函数的话，转换成{ bind: def, update: def }的形式,bind/unpate/inserted都是自定义指令对象的钩子函数
  if (dirs) {
    for (const key in dirs) {
      const def = dirs[key]
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def }
      }
    }
  }
}
// 断言类型,表示需要的是一个对象，从用法上来看name应该是一个对象的属性，value是对应属性的值
// 判断属性值是否是一个javascript('[object Object]'),不是的话直接报警告
function assertObjectType (name: string, value: any, vm: ?Component) {
  if (!isPlainObject(value)) {
    warn(
      `Invalid value for option "${name}": expected an Object, ` +
      `but got ${toRawType(value)}.`,
      vm
    )
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
// 将两个选项对象合并为新的对象,这个是用于实例化和继承的核心实用程序
export function mergeOptions (
  parent: Object,
  child: Object,
  vm?: Component
): Object {
  // 不是生产环境的话，检查一下child对象的属性，看看是否不符合命名
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child)
  }
  // 如果child是函数的话，child为其配置对象(首先需要合并的是两个对象的属性，其次像data这样的它可能是个函数)
  if (typeof child === 'function') {
    child = child.options
  }
  // 规范化props的写法
  normalizeProps(child, vm)
  // 规范化inject的写法
  normalizeInject(child, vm)
  // 规范化自定义指令的写法
  normalizeDirectives(child)
  const extendsFrom = child.extends
  if (extendsFrom) {
    // 如果子组件的配置对象上有拓展的属性，将拓展的属性跟父组件的配置对象先做合并(不改变源对象，产生新对象)
    parent = mergeOptions(parent, extendsFrom, vm)
  }
  if (child.mixins) {
    // 如果子组件的配置对象上有混入的属性，将每一个混入的属性按序跟父组件的配置对象先做合并(不改变源对象，产生新对象)
    for (let i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm)
    }
  }
  // 之后就是对对象上属性做处理,options就是最终要返回的新对象
  const options = {}
  let key
  // 先遍历父组件配置对象，把父组件配置对象的每一个属性根据合并策略复制到新对象上
  for (key in parent) {
    mergeField(key)
  }
  // 再遍历子组件配置对象，如果在父组件配置对象上也存在同样的属性，根据合并策略来复制到新对象上
  // 为什么子组件配置对象上的其他属性就不复制进新对象？
  // 个人认为一开始混合对象是parent这个的实参其实来自于解析vm.constructor得到的配置对象，
  // 上面已经预选准备好了所有可能会用到的属性，这样当新建一个vue实例的时候，对于那些奇奇怪怪的属性能达到过滤效果
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key)
    }
  }
  // strats是全局配置里的自定义合并策略函数,就是根据自定义的合并策略函数或者默认的合并策略函数合并属性
  function mergeField (key) {
    const strat = strats[key] || defaultStrat
    options[key] = strat(parent[key], child[key], vm, key)
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
// 用来解析资源（什么资源？）
// 辅助函数中有一个这样的调用：resolveAsset(this.$options, 'filters', id, true),此时用于解析filters
// 使用此函数是因为子实例需要访问其祖先链中定义的资源(可能是因为存在Vue.extend创建子类)
export function resolveAsset (
  options: Object,
  type: string,
  id: string,
  warnMissing?: boolean
): any {
  // id不是字符串就直接返回
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  // 缓存对应类型的数据
  const assets = options[type]
  // check local registration variations first
  // 首先检查一下本地注册的变化
  // 这里的意思应该是先用原本的id来查找，找不到就转换格式来尝试查找
  // 判断数据上是否存在该id键，存在则返回
  if (hasOwn(assets, id)) return assets[id]
  // 转成驼峰式再看是否存在
  const camelizedId = camelize(id)
  if (hasOwn(assets, camelizedId)) return assets[camelizedId]
  // 第一个字母大写，即再转成大驼峰式看下是否存在
  const PascalCaseId = capitalize(camelizedId)
  if (hasOwn(assets, PascalCaseId)) return assets[PascalCaseId]
  // fallback to prototype chain
  // 啥都找不到就只能顺着原型链查找,可能会有值
  const res = assets[id] || assets[camelizedId] || assets[PascalCaseId]
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    )
  }
  return res
}

/* @flow */

import config from '../config'
import { initUse } from './use'
import { initMixin } from './mixin'
import { initExtend } from './extend'
import { initAssetRegisters } from './assets'
import { set, del } from '../observer/index'
import { ASSET_TYPES } from 'shared/constants'
import builtInComponents from '../components/index'

import {
  warn,
  extend,
  nextTick,
  mergeOptions,
  defineReactive
} from '../util/index'

export function initGlobalAPI (Vue: GlobalAPI) {
  // config
  // 定义Vue构造函数的全局属性config，访问Vue.config的时候会返回内部定义的config，但是修改的时候不允许整个去覆盖对象,只能一个个去设置对象字段
  const configDef = {}
  configDef.get = () => config
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = () => {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      )
    }
  }
  Object.defineProperty(Vue, 'config', configDef)

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  // 暴露出工具方法，但这不作为公共的api，因为会有风险，使用时要慎重
  Vue.util = {
    warn,
    extend,
    mergeOptions,
    defineReactive
  }
  // 向响应式对象中添加一个响应式的属性，同时触发视图更新
  Vue.set = set
  // 删除对象的属性，如果对象是响应式的，确保删除能触发视图更新
  Vue.delete = del
  // 在下次Dom更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，获取更新后的DOM
  Vue.nextTick = nextTick
  // 初始化静态属性options中的filters、directives、components
  Vue.options = Object.create(null)
  ASSET_TYPES.forEach(type => {
    Vue.options[type + 's'] = Object.create(null)
  })

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  // _base属性用于标识'基本'的构造函数，以拓展WEEX多实例场景中的所有纯对象组件,最基本最开始的构造函数即是Vue
  Vue.options._base = Vue
  // 拓展全局的components，把内置的组件加入其中
  extend(Vue.options.components, builtInComponents)
  // 注册Vue.use方法，Vue.use方法用于为Vue安装插件
  initUse(Vue)
  // 注册Vue.mixin方法，Vue.mixin方法用于全局注册一个混入，会影响注册之后所有创建的每个Vue实例
  initMixin(Vue)
  // 注册Vue.extend方法，Vue.extend方法用于使用基础的Vue构造器，创建一个'子类'
  initExtend(Vue)
  // 注册Vue.filter、Vue.directive、Vue.component方法
  // Vue.filter方法用于注册或获取全局过滤器
  // Vue.directive方法用于注册或获取全局指令
  // Vue.component方法用于注册或获取去全局组件
  initAssetRegisters(Vue)
}

/* @flow */

import config from '../config'
import Watcher from '../observer/watcher'
import { mark, measure } from '../util/perf'
import { createEmptyVNode } from '../vdom/vnode'
import { updateComponentListeners } from './events'
import { resolveSlots } from './render-helpers/resolve-slots'
import { toggleObserving } from '../observer/index'
import { pushTarget, popTarget } from '../observer/dep'

import {
  warn,
  noop,
  remove,
  handleError,
  emptyObject,
  validateProp
} from '../util/index'

export let activeInstance: any = null
export let isUpdatingChildComponent: boolean = false
// 初始化一些生命周期中会用到的属性
export function initLifecycle (vm: Component) {
  const options = vm.$options

  // locate first non-abstract parent
  // 定位第一个非抽象父组件实例
  // 抽象组件如<keep-alive>、<transition>，自身不会渲染一个DOM元素，也不会出现在父组件链中
  // 这里是想把非抽象的子组件跟非抽象的父组件建立联系
  let parent = options.parent
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent
    }
    parent.$children.push(vm)
  }
  // 指向父实例，如果当前实例有的话
  vm.$parent = parent
  // 指向当前组件树的根Vue实例，如果当前实例没有父实例，将指向自己
  vm.$root = parent ? parent.$root : vm
  // 初始化保存实例的直接子组件数组，它不是响应式的，也不保证顺序
  vm.$children = []
  // 初始化用于保存注册过ref特性的所有DOM元素和组件实例
  vm.$refs = {}
  // 初始化一些辅助属性，用于后续使用
  // 实例的观察者
  vm._watcher = null
  // 实例是否需要进入非活动状态的标志
  vm._inactive = null
  // 实例是否直接就是非活动状态
  vm._directInactive = false
  // 实例是否已经挂载
  vm._isMounted = false
  // 实例是否已经销毁
  vm._isDestroyed = false
  // 实例是否正在销毁
  vm._isBeingDestroyed = false
}
// 添加生命周期方法
export function lifecycleMixin (Vue: Class<Component>) {
  // 内部更新方法,需要更新视图时调用
  Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {
    const vm: Component = this
    // 已经挂载过，先执行beforeUpdate生命周期
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate')
    }
    const prevEl = vm.$el
    const prevVnode = vm._vnode
    const prevActiveInstance = activeInstance
    activeInstance = vm
    vm._vnode = vnode
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    // Vue.prototype.__patch__ 这个方法是在用于后台渲染的入口注入的
    // 初始渲染
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      )
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      // 初始的比较渲染后不需要引用节点，防止在内存中保存分离的DOM树
      vm.$options._parentElm = vm.$options._refElm = null
    // 不是初始渲染时.前后抽象树比较更新
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode)
    }
    activeInstance = prevActiveInstance
    // update __vue__ reference
    // 更新节点对vm实例的引用,经过patch后vm.$el已经改变了，不是之前prevEl这个，故切断之前节点的引用，重新引用vm实例
    if (prevEl) {
      prevEl.__vue__ = null
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm
    }
    // if parent is an HOC, update its $el as well
    //  高阶组件，Higher Order Component，简称：HOC。高阶组件是包裹了另一个组件的组件
    // 简言之，如果是高阶组件（即组件嵌套，子组件的抽象树跟父组件的一样）,那么父组件的节点跟实例的节点统一
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
    // updated生命周期钩子会通过调度程序调用，用来确保在父组件的updated生命周期钩子中更新子组件
  }
  // 迫使vm实例重新渲染，仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件
  Vue.prototype.$forceUpdate = function () {
    const vm: Component = this
    if (vm._watcher) {
      vm._watcher.update()
    }
  }
  // 完全销毁一个实例，清理它与其他实例的连接，解绑它的全部指令及事件监听器 
  Vue.prototype.$destroy = function () {
    // 缓存vm实例
    const vm: Component = this
    // 实例已经在销毁过程中，不作处理
    if (vm._isBeingDestroyed) {
      return
    }
    // 调用beforeDestroy生命周期钩子
    callHook(vm, 'beforeDestroy')
    // 改变销毁标志，表明销毁正在进行中（已经调用过beforeDestroy生命周期）
    vm._isBeingDestroyed = true
    // remove self from parent
    // 删除父组件对实例的引用
    const parent = vm.$parent
    // 父组件存在且没有被销毁，同时实例本身不是抽象组件，那么从父组件中移除掉实例
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm)
    }
    // teardown watchers
    // 取消实例自身的观察，清除依赖(或者说清除所有对其的订阅)
    if (vm._watcher) {
      vm._watcher.teardown()
    }
    let i = vm._watchers.length
    // 取消对实例属性的观察
    while (i--) {
      vm._watchers[i].teardown()
    }
    // remove reference from data ob
    // frozen object may not have observer.
    // 移除数据观测的引用,某些data是冻结的，不存在__ob__属性，故这里先判断一下
    // 其实就是实例销毁了，改变对数据的观测的引用计数
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--
    }
    // call the last hook...
    // 观察取消了，依赖删除了,数据引用计数也改了，基本上数据处理完毕，那么改变标志位，表明实例已经被销毁了
    vm._isDestroyed = true
    // invoke destroy hooks on current rendered tree
    // 在当前渲染树上调用销毁钩子,__patch__是前后抽象节点的对比方法，用于优化更新节点，这里直接拿当前抽象树跟null比较，其实就是删除当前的抽象树
    vm.__patch__(vm._vnode, null)
    // fire destroyed hook
    // 调用destroyed生命周期钩子
    callHook(vm, 'destroyed')
    // turn off all instance listeners.
    // 解绑所有的事件监听
    vm.$off()
    // remove __vue__ reference
    // 移除节点对实例的引用
    if (vm.$el) {
      vm.$el.__vue__ = null
    }
    // release circular reference (#6759)
    // 释放循环引用
    if (vm.$vnode) {
      vm.$vnode.parent = null
    }
  }
}
// 挂载时渲染视图的方法
export function mountComponent (
  vm: Component,
  el: ?Element,
  hydrating?: boolean
): Component {
  vm.$el = el
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        )
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        )
      }
    }
  }
  // 调用beforeMount生命周期钩子
  callHook(vm, 'beforeMount')
  // 定义渲染、比较节点的方法,非生产环境下会启用性能追踪
  let updateComponent
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = () => {
      const name = vm._name
      const id = vm._uid
      const startTag = `vue-perf-start:${id}`
      const endTag = `vue-perf-end:${id}`

      mark(startTag)
      const vnode = vm._render()
      mark(endTag)
      measure(`vue ${name} render`, startTag, endTag)

      mark(startTag)
      vm._update(vnode, hydrating)
      mark(endTag)
      measure(`vue ${name} patch`, startTag, endTag)
    }
  } else {
    updateComponent = () => {
      vm._update(vm._render(), hydrating)
    }
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  // 我们会在watcher的构造函数中将其设置为vm._watcher,
  // 因为渲染的观察者的初始补丁可能会调用$forceUpdate这个函数(例如在子组件的mounted钩子中)，
  // 这个函数依赖于vm._watcher
  // 这里新建一个实例的watcher后，updateComponent函数直接就被执行，也就是说，直接就先执行了vm._render,又执行了vm._update
  // vm._render，在renderMixin中定义了Vue.prototype._render方法
  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */)
  hydrating = false

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  // 手动安装的实例，调用它自身的mounted钩子
  // mounted钩子会在它的inserted钩子中渲染创建子组件时被调用
  if (vm.$vnode == null) {
    vm._isMounted = true
    callHook(vm, 'mounted')
  }
  return vm
}

export function updateChildComponent (
  vm: Component,
  propsData: ?Object,
  listeners: ?Object,
  parentVnode: MountedComponentVNode,
  renderChildren: ?Array<VNode>
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  const hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  )

  vm.$options._parentVnode = parentVnode
  vm.$vnode = parentVnode // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode
  }
  vm.$options._renderChildren = renderChildren

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject
  vm.$listeners = listeners || emptyObject

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false)
    const props = vm._props
    const propKeys = vm.$options._propKeys || []
    for (let i = 0; i < propKeys.length; i++) {
      const key = propKeys[i]
      const propOptions: any = vm.$options.props // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm)
    }
    toggleObserving(true)
    // keep a copy of raw propsData
    vm.$options.propsData = propsData
  }

  // update listeners
  listeners = listeners || emptyObject
  const oldListeners = vm.$options._parentListeners
  vm.$options._parentListeners = listeners
  updateComponentListeners(vm, listeners, oldListeners)

  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context)
    vm.$forceUpdate()
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false
  }
}
// inactive不活动的，vm._inactive用于标志实例是否是不活动的状态
// 函数用来确定当前实例是否是在不活动的组件树上
function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) return true
  }
  return false
}
// 激活当前组件实例vm下的子组件
// 先判断一下是否要直接激活(direct),
// 如果是要直接激活，给当前组件做下状态标记(vm._directInactive)
// 然后往组件树上查询，看看是否是位于失活的组件树上，如果是的话，不做处理直接返回，毕竟父组件是失活状态，当前组件跟其子组件激活了也没用
// 如果不需要直接激活，同时当前组件标记为不需激活的状态,那么也不做处理直接返回，因为当前组件不激活，激活其子组件也是没又用的，还浪费资源
// 接下去判断当前实例vm是否处于失活状态，如果不是的话（即处于激活态），不用处理,激活激活状态下的组件是不必要的。能来到这里说明当前组件不处于失活的组件树上，或者不是被标记为不激活。
// 如果是失活态的话（vm._inactive === true表示被失活过，vm._inactive === null表示组件没经历过失活跟激活）,
// 将当前组件实例设置为激活态，同时递归遍历其子组件实例做激活处理，之后再出发当前组件的activated生命周期钩子
// 由此可见子组件的activated生命周期钩子比父组件的先触发
export function activateChildComponent (vm: Component, direct?: boolean) {
  if (direct) {
    vm._directInactive = false
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false
    for (let i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i])
    }
    callHook(vm, 'activated')
  }
}
// 失活当前组件实例vm下的子组件
// 先判断一下时候要直接失活(direct)
// 如果是要直接失活，给当前组件做下状态标记(vm._directInactive)，表明当前组件实例需要失活处理
// 然后往其组件树上查询，如果是位于失活的组件树上，不作处理直接返回,毕竟整棵树从源头起都是失活状态了，树上的失不失活就没必要了
// 之后就是没有标志说直接失活的处理，如果组件实例没有失活，就执行失活处理，同时触发递归遍历其子组件实例做失活处理，触发当前的deactivated钩子，反之不做处理
export function deactivateChildComponent (vm: Component, direct?: boolean) {
  if (direct) {
    vm._directInactive = true
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true
    for (let i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i])
    }
    callHook(vm, 'deactivated')
  }
}
// 执行生命周期函数
export function callHook (vm: Component, hook: string) {
  // #7573 disable dep collection when invoking lifecycle hooks
  // 不应该在执行生命周期函数的时候收集依赖项，所以先把当前正在收集依赖的target入栈，等执行完后再出栈恢复状态
  // 避免冗余依赖收集
  pushTarget()
  // 遍历执行对应生命周期的各个函数,出错则捕获
  const handlers = vm.$options[hook]
  if (handlers) {
    for (let i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm)
      } catch (e) {
        handleError(e, vm, `${hook} hook`)
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook)
  }
  popTarget()
}

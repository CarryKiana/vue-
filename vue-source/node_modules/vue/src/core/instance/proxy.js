/* not type checking this file because flow doesn't play well with Proxy */

import config from 'core/config'
// warn 警告提示方法，makeMap映射表生成器，isNative判断是否是原生方法
import { warn, makeMap, isNative } from '../util/index'

let initProxy
// 假如不是生产环境，为定义一个绑定代理的函数，这个函数用来代理对象，即执行一些对象操作的时候能先挟持做些额外的处理
if (process.env.NODE_ENV !== 'production') {
  // 先生成一个查询器，可以用来查询是否是可以用的全局对象
  const allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  )
  // 再定义一个缺省提示函数，用来提示使用了哪个不存在的方法或属性
  const warnNonPresent = (target, key) => {
    warn(
      `Property or method "${key}" is not defined on the instance but ` +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    )
  }
  // 接着判断Proxy这个对象是否原生存在
  const hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy)
  // 如果原生Proxy存在，生成一个内置修饰符的查询器,config.keyCodes是给v-on定义自定义别名用的
  // 这里给定义的各个自定义别名做一层代理,拦截对象属性的设置,比如proxy.foo = v或proxy['foo'] = v这样的就会被代理成set函数
  // 用来检测是否在自定义别名里是否意外的定义了内置的修饰符,即不允许自定义别名修改内置修饰符，如果定义了会给出警告并且不让修改
  if (hasProxy) {
    const isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact')
    config.keyCodes = new Proxy(config.keyCodes, {
      set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`)
          return false
        } else {
          target[key] = value
          return true
        }
      }
    })
  }
  // 定义拦截propKey in proxy的操作,例如var a = { b: 1 }; 'b' in a 返回true， 'c' in a 返回false, 即是判断属性是否在对象上存在
  // 如果属性存在并且是被允许访问的全局对象或者是定义的私有属性，那么返回true，否则返回false
  const hasHandler = {
    has (target, key) {
      const has = key in target
      const isAllowed = allowedGlobals(key) || key.charAt(0) === '_'
      if (!has && !isAllowed) {
        warnNonPresent(target, key)
      }
      return has || !isAllowed
    }
  }
  // 定义拦截某个属性的读取操作，比如proxy.foo和proxy['foo']
  // 如果这个键不是string类型并且目标对象上不存在这个属性，给出不存在这个属性或方法的警告
  // 目标对象上不存在这个属性，为什么只有key为string类型时才警告？
  const getHandler = {
    get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key)
      }
      return target[key]
    }
  }
  // 根据条件判断该用哪个代理方法
  // 如果配置对象上存在render方法并且存在 _withStripped 属性,拦截读取操作,否则拦截 propKey in proxy操作，暂不知道_withStripped哪里产生的，merseOptions?
  // 如果不存在原生代理对象就不代理
  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      const options = vm.$options
      const handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler
      vm._renderProxy = new Proxy(vm, handlers)
    } else {
      vm._renderProxy = vm
    }
  }
}

export { initProxy }

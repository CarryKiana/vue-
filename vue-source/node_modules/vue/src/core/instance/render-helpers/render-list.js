/* @flow */

import { isObject, isDef } from 'core/util/index'

/**
 * Runtime helper for rendering v-for lists.
 */
// 渲染辅助函数，用于处理v-for
// v-for指令会基于源数据多次渲染元素或模板块，预期可以是数组、对象、数字、字符串或迭代器
// 针对不同的类型会有不同的渲染方式
export function renderList (
  val: any,
  render: (
    val: any,
    keyOrIndex: string | number,
    index?: number
  ) => VNode
): ?Array<VNode> {
  // 判断val的类型，用render函数处理val，返回ret
  let ret: ?Array<VNode>, i, l, keys, key
  // 如果val是数组或者是字符串,那么用render处理每个元素并存储到ret中
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length)
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i)
    }
  // 如果val是数字类型,循环val次并把结果存于ret中
  } else if (typeof val === 'number') {
    ret = new Array(val)
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i)
    }
  // 如果val是对象，遍历处理对象属性,结果存于ret中
  } else if (isObject(val)) {
    keys = Object.keys(val)
    ret = new Array(keys.length)
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i]
      ret[i] = render(val[key], key, i)
    }
  }
  // 处理完后判断一下，ret是否不是undefined跟null，不是的话（即有含义）做下标记
  if (isDef(ret)) {
    (ret: any)._isVList = true
  }
  // 返回处理结果
  return ret
}

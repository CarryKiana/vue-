/* @flow */

import {
  tip,
  toArray,
  hyphenate,
  handleError,
  formatComponentName
} from '../util/index'
import { updateListeners } from '../vdom/helpers/index'
// 初始化自定义事件
export function initEvents (vm: Component) {
  // 用来保存监听的自定义事件（key）和相应回调（value）
  vm._events = Object.create(null)
  // 用来表明自定义事件中是否含有'hook:'开头的自定义函数
  vm._hasHookEvent = false
  // init parent attached events
  // 初始化父级附加事件
  // 等于说如果存在父级附加的自定义事件,那么为当前组件实例更新其监听器
  const listeners = vm.$options._parentListeners
  if (listeners) {
    updateComponentListeners(vm, listeners)
  }
}
// target在需要时会指向当前vm实例，故而此方法用于为当前实例注册事件
let target: any
// 为当前实例注册事件
function add (event, fn, once) {
  if (once) {
    target.$once(event, fn)
  } else {
    target.$on(event, fn)
  }
}
// 为当前实例移除事件
function remove (event, fn) {
  target.$off(event, fn)
}
// 更新组件的监听事件
export function updateComponentListeners (
  vm: Component,
  listeners: Object,
  oldListeners: ?Object
) {
  target = vm
  // 更新监听器
  updateListeners(listeners, oldListeners || {}, add, remove, vm)
  target = undefined
}
// 为Vue构造函数的原型绑定事件方法，因为是挂载在原型上，所以新建实例的时候这些事件方法会被实例继承成为实例的事件方法
export function eventsMixin (Vue: Class<Component>) {
  const hookRE = /^hook:/
  // 监听当前实例上的自定义事件event，事件可由vm.$emit触发，事件触发时执行回调函数fn，fn会接收所有传入事件触发函数$emit的额外参数
  Vue.prototype.$on = function (event: string | Array<string>, fn: Function): Component {
    const vm: Component = this
    if (Array.isArray(event)) {
      for (let i = 0, l = event.length; i < l; i++) {
        this.$on(event[i], fn)
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn)
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      // 采用一个布尔标志来在注册时标记以优化钩子事件开销，而不是用哈希查找
      // 就是说这些这定义事件里含有'hook:'字样的，就用_hasHookEvent表示一下
      if (hookRE.test(event)) {
        vm._hasHookEvent = true
      }
    }
    return vm
  }
  // 监听当前实例的一个自定义事件，只触发一次，在第一次触发后移除
  // 其实就是对回调函数fn做下包装，为自定义事件监听新回调函数,而在新回调函数中会调用解除监听
  Vue.prototype.$once = function (event: string, fn: Function): Component {
    const vm: Component = this
    function on () {
      vm.$off(event, on)
      fn.apply(vm, arguments)
    }
    on.fn = fn
    vm.$on(event, on)
    return vm
  }
  // 移除自定义事件监听,不传event只传fn是啥都不会执行的（骚操作不可取）
  Vue.prototype.$off = function (event?: string | Array<string>, fn?: Function): Component {
    const vm: Component = this
    // all
    // 如果没有提供参数，则移除所有事件监听器
    if (!arguments.length) {
      vm._events = Object.create(null)
      return vm
    }
    // array of events
    // 如果是个数组，遍历数组并未每个元素执行移除监听操作
    if (Array.isArray(event)) {
      for (let i = 0, l = event.length; i < l; i++) {
        this.$off(event[i], fn)
      }
      return vm
    }
    // specific event
    const cbs = vm._events[event]
    // 没有这个事件的话啥都不会做
    if (!cbs) {
      return vm
    }
    // 只提供事件，就要移除该事件的所有监听器
    if (!fn) {
      vm._events[event] = null
      return vm
    }
    // 同时提供了事件跟回调，则在遍历监听器数组，只移除这个监听器
    if (fn) {
      // specific handler
      let cb
      let i = cbs.length
      while (i--) {
        cb = cbs[i]
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1)
          break
        }
      }
    }
    return vm
  }
  // 触发当前实例上的事件，附加参数都会传给监听器回调
  Vue.prototype.$emit = function (event: string): Component {
    const vm: Component = this
    if (process.env.NODE_ENV !== 'production') {
      const lowerCaseEvent = event.toLowerCase()
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          `Event "${lowerCaseEvent}" is emitted in component ` +
          `${formatComponentName(vm)} but the handler is registered for "${event}". ` +
          `Note that HTML attributes are case-insensitive and you cannot use ` +
          `v-on to listen to camelCase events when using in-DOM templates. ` +
          `You should probably use "${hyphenate(event)}" instead of "${event}".`
        )
      }
    }
    // 取出要触发的事件上的监听器数组并遍历执行
    let cbs = vm._events[event]
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs
      const args = toArray(arguments, 1)
      for (let i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args)
        } catch (e) {
          handleError(e, vm, `event handler for "${event}"`)
        }
      }
    }
    return vm
  }
}

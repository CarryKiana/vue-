/* @flow */

import { parse } from './parser/index'
import { optimize } from './optimizer'
import { generate } from './codegen/index'
import { createCompilerCreator } from './create-compiler'

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
// createCompilerCreator允许创建使用其他分析器、优化器、代码生成器的编译器，例如ssr优化编译器。
// 这里我们只导出使用默认部分的默认编译器
// 默认编译器传入的参数是一个基础编译函数baseCompile
// baseCompile需要传入字符串模板template以及编译配置对象options,然后根据配置对象options把template转换为抽象语法树,最后返回以抽象语法树跟渲染函数组成的对象
// const { compile, compileToFunctions } = createCompiler(baseOptions)
// 根据调用示例可以看出，baseCompile是编译规则，options是编译配置,createCompilerCreator实际是对baseCompile进行包装,生成createCompiler函数,
// 调用createCompiler时，只需传入配置对象，在内部会调用baseCompile方法,对template进行转换
export const createCompiler = createCompilerCreator(function baseCompile (
  template: string,
  options: CompilerOptions
): CompiledResult {
  // 把模板解析成抽象语法树
  const ast = parse(template.trim(), options)
  // 对抽象语法树进行优化
  if (options.optimize !== false) {
    optimize(ast, options)
  }
  // 把抽象语法树转换成代码字符串
  const code = generate(ast, options)
  // 返回一个包含抽象语法树、动\静态渲染函数的代码字符串(这里只是变成代码字符串，还没变成函数)
  return {
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
})

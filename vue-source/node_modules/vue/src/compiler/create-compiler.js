/* @flow */

import { extend } from 'shared/util'
import { detectErrors } from './error-detector'
import { createCompileToFunctionFn } from './to-function'
// 编译器构造器,会根据传入的特定功能函数（或叫编译规则，如：默认编译器、分析器、优化器、代码生成器），创建一个用来执行特定功能的方法
export function createCompilerCreator (baseCompile: Function): Function {
  return function createCompiler (baseOptions: CompilerOptions) {
    function compile (
      template: string,
      options?: CompilerOptions
    ): CompiledResult {
      // 初始化最终的配置对象（使用Object.create来继承不会对baseOptions进行修改）
      const finalOptions = Object.create(baseOptions)
      const errors = []
      const tips = []
      finalOptions.warn = (msg, tip) => {
        (tip ? tips : errors).push(msg)
      }
      // 如果存在传入的options，那么把传入的配置跟继承得来的配置混合，作为最后的配置对象
      if (options) {
        // merge custom modules
        // 跟默认的modules属性混合，concat方法不是变异方法，不会改变源数组,这里直接使用baseOptions.modules是可以的
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules)
        }
        // merge custom directives
        // 跟默认的指令directives属性混合，extend、Object.create都会返回新对象
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          )
        }
        // copy other options
        // 其他的不像modules、directives具有多层复杂结构的，直接拷贝
        for (const key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key]
          }
        }
      }
      // 配置混合后，根据混合后的配置，执行编译规则，把模板字符串转换成渲染函数
      const compiled = baseCompile(template, finalOptions)
      if (process.env.NODE_ENV !== 'production') {
        // 非生产环境下会检查抽象语法树，尝试发现错误
        errors.push.apply(errors, detectErrors(compiled.ast))
      }
      compiled.errors = errors
      compiled.tips = tips
      // 返回compiled这个结果，这个结果就包含了动态渲染函数、静态渲染函数等属性
      return compiled
    }

    return {
      compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

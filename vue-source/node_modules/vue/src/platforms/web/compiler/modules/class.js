/* @flow */

import { parseText } from 'compiler/parser/text-parser'
// getAndRemoveAttr删除并返回attrsList上的属性
// getBindingAttr获取并解析v-bind属性
// baseWarn打印编译错误
import {
  getAndRemoveAttr,
  getBindingAttr,
  baseWarn
} from 'compiler/helpers'
// 此处的transformNode是用来解析动态跟静态的class的
function transformNode (el: ASTElement, options: CompilerOptions) {
  // 缓存警告函数
  const warn = options.warn || baseWarn
  // 从el上的attrsList上删除并返回静态class属性,转换时用attrsList，不会去动到attrsMap，attrsMap用于生成代码时
  const staticClass = getAndRemoveAttr(el, 'class')
  if (process.env.NODE_ENV !== 'production' && staticClass) {
    // class是静态属性，借助调用parseText来判断，若有返回值，表示绑定了动态数据
    const res = parseText(staticClass, options.delimiters)
    if (res) {
      // 静态属性内的插值会直接被JSON.stringify序列化，所以动态绑定不会有效果，
      // 需动态插值请使用动态语法
      warn(
        `class="${staticClass}": ` +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.'
      )
    }
  }
  // 静态属性class若存在，为抽象节点设置静态类属性
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass)
  }
  // 获取动态属性class，getBindingAttr内部也会调用getAndRemoveAttr把处理过的属性从attrsList上删除
  const classBinding = getBindingAttr(el, 'class', false /* getStatic */)
  // 如果存在动态属性class，为抽象节点设置动态类属性
  if (classBinding) {
    el.classBinding = classBinding
  }
}
// 把处理过的抽象节点的静态类跟动态类拼接返回
function genData (el: ASTElement): string {
  let data = ''
  if (el.staticClass) {
    data += `staticClass:${el.staticClass},`
  }
  if (el.classBinding) {
    data += `class:${el.classBinding},`
  }
  return data
}
// 暴露给外部
export default {
  staticKeys: ['staticClass'],
  transformNode,
  genData
}

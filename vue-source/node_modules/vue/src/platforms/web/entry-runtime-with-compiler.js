/* @flow */

import config from 'core/config'
import { warn, cached } from 'core/util/index'
import { mark, measure } from 'core/util/perf'
// 引入web下封装过的Vue构造函数
import Vue from './runtime/index'
// web下获取dom节点函数的封装
import { query } from './util/index'
// 编译成render函数
import { compileToFunctions } from './compiler/index'
// 兼容性判断是否需要解码
import { shouldDecodeNewlines, shouldDecodeNewlinesForHref } from './util/compat'
// 获取并缓存模板
const idToTemplate = cached(id => {
  const el = query(id)
  return el && el.innerHTML
})

const mount = Vue.prototype.$mount
// 改造Vue的$mount函数，加入模板编译过程
Vue.prototype.$mount = function (
  el?: string | Element,
  hydrating?: boolean
): Component {
  el = el && query(el)

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    process.env.NODE_ENV !== 'production' && warn(
      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`
    )
    return this
  }

  const options = this.$options
  // resolve template/el and convert to render function
  // 解析template/el并将其转换为渲染函数
  // 可以看出render的优先级高于template，若render存在，将不会解析template
  // 如果render不存在，尝试获取template
  if (!options.render) {
    let template = options.template
    // 如果template存在，判断template的类型，以确定要转换成render的部分
    if (template) {
      // 若template是字符串,
      // 如果值是以#开始的，则它将被用作选择符，使用匹配元素的innerHTML作为模板
      // 如果不是以#开始的，则默认这个值就是模板
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template)
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !template) {
            warn(
              `Template element not found or is empty: ${options.template}`,
              this
            )
          }
        }
      // 如果这个值是dom节点（会不会存在人为构造ast的情况，同样存在nodeType跟innerHTML的属性?）
      // 以此节点的innerHTML作为模板
      } else if (template.nodeType) {
        template = template.innerHTML
      // 除以上的情况外，即template不符合格式，报错
      } else {
        if (process.env.NODE_ENV !== 'production') {
          warn('invalid template option:' + template, this)
        }
        return this
      }
    // 如果不存在template模板，但是存在el节点，还可以尝试拯救一下的，
    // 就是把el即其后代内容序列化为字符串作为模板
    } else if (el) {
      template = getOuterHTML(el)
    }
    // 确定完template的值后，调用转换函数将其转换为渲染函数
    // 非生产环境下还会记录性能
    if (template) {
      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile')
      }
      // 调用模板转换渲染函数
      // shouldDecodeNewlines:是否需要对属性解码，shouldDecodeNewlinesForHref:是否需要对href属性解码
      // delimiters: 默认值是["{{", "}}"]，即是改变纯文本插入分隔符
      // comments:注释
      const { render, staticRenderFns } = compileToFunctions(template, {
        shouldDecodeNewlines,
        shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this)
      options.render = render
      options.staticRenderFns = staticRenderFns

      /* istanbul ignore if */
      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
        mark('compile end')
        measure(`vue ${this._name} compile`, 'compile', 'compile end')
      }
    }
  }
  // 调用运行时$mount
  return mount.call(this, el, hydrating)
}

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
// 获取元素的outerHTML，在ie下的svg元素也能很好的工作
// el.outerHTML是元素及其后代的序列化HTML片段
function getOuterHTML (el: Element): string {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    const container = document.createElement('div')
    container.appendChild(el.cloneNode(true))
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions

export default Vue

/* @flow */

import { isDef, isObject } from 'shared/util'
// 为vnode生成class属性
export function genClassForVnode (vnode: VNodeWithData): string {
  let data = vnode.data
  let parentNode = vnode
  let childNode = vnode
  // componentInstance是一个Vue实例
  // 这里往抽象节点下游跟上游合并class数据，难道是考虑到抽象节点还不是真实节点的映射，
  // 会存在一些最终不会渲染出来的抽象节点，比如说定义了一个子组件，子组件有一个class属性，然后被父组件引用，在父组件中又给子组件定义了class属性，所以需要合并？
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data)
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data)
    }
  }
  // 返回合并后的class属性
  return renderClass(data.staticClass, data.class)
}
// 合并抽象父节点跟抽象子节点的class属性
function mergeClassData (child: VNodeData, parent: VNodeData): {
  staticClass: string,
  class: any
} {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}
// 合并静态class属性与动态class属性
export function renderClass (
  staticClass: ?string,
  dynamicClass: any
): string {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}
// 合并a、b（以字符串连接的形式）
export function concat (a: ?string, b: ?string): string {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}
// 格式化class属性
export function stringifyClass (value: any): string {
  // 如果是数组，按数组的形式格式化
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  // 如果是对象，按对象的形式格式化
  if (isObject(value)) {
    return stringifyObject(value)
  }
  // 如果是字符串，原封不动返回
  if (typeof value === 'string') {
    return value
  }
  // 否则返回空字符串
  /* istanbul ignore next */
  return ''
}
// 格式化数组：解析v-bind:class=[]
// v-bind:class="[activeClass, errorClass]" 或 v-bind:class="[isActive ? activeClass : '', errorClass]"
function stringifyArray (value: Array<any>): string {
  let res = ''
  let stringified
  // 遍历并格式化数组中的每一个元素，如果格式化后的值不是空字符串，那么拼接起来一起返回
  for (let i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) res += ' '
      res += stringified
    }
  }
  return res
}
// 格式化对象：把对象有真值的属性（key）按空格分隔组成字符串返回
// 如 a = { b: '', c: '1', d: 2 },stringifyObject(a)返回'c d',解析v-bind:class= {}
function stringifyObject (value: Object): string {
  let res = ''
  for (const key in value) {
    if (value[key]) {
      if (res) res += ' '
      res += key
    }
  }
  return res
}
